/*! For license information please see index.9adbbf935067ff1df9fa.min.js.LICENSE.txt */
(()=>{var e={70:(e,t,r)=>{new(r(2152))(".btn-clipboard",{text:function(e){var t=e.getAttribute("data-clipboard-target").substr(1);return document.getElementById(t).textContent.replace(/^\$\W*/gm,"")}}).on("success",(function(e){return e.clearSelection()})),e.exports=function(){document.querySelectorAll("code.hljs").forEach((function(e){var t="_".concat(Math.random().toString(36).substr(5));e.id=t;var r=document.createElement("div");if(r.classList.add("btn-group","border","float-left"),e.parentElement.appendChild(r),e.dataset.fiddleUrl){var n=document.createElement("button");n.classList.add("btn-launch","tooltipped","tooltipped-n","float-left"),n.setAttribute("aria-label",window.localized.fiddle_launch_button.launch_in_fiddle),n.setAttribute("data-fiddle-url",e.dataset.fiddleUrl),n.innerHTML=window.localized.fiddle_launch_button.launch,r.appendChild(n)}var i=document.createElement("button");i.classList.add("btn-clipboard","tooltipped","tooltipped-n","float-left"),i.setAttribute("aria-label",window.localized.clipboard.copy_to_clipboard),i.setAttribute("data-clipboard-target","#".concat(t)),i.innerHTML=window.localized.clipboard.copy,r.appendChild(i)})),document.querySelectorAll(".btn-launch").forEach((function(e){e.addEventListener("mouseout",(function(e){e.target.blur()})),e.addEventListener("click",(function(e){window.open("https://fiddle.electronjs.org/launch?target=".concat(e.target.dataset.fiddleUrl))}))})),document.querySelectorAll(".btn-clipboard").forEach((function(e){e.addEventListener("mouseout",(function(e){e.target.setAttribute("aria-label",window.localized.clipboard.copy_to_clipboard),e.target.blur()})),e.addEventListener("click",(function(e){e.target.setAttribute("aria-label",window.localized.clipboard.copied)}))}))}},9130:e=>{e.exports=function(){function e(e,t){for(var r,n,i=t.getElementsByTagName("h"+e),o=0;o<i.length;o++){var s=i[o];void 0!==s.id&&""!==s.id&&s.appendChild((r=s.id,n=void 0,(n=document.createElement("a")).className="header-link",n.href="#"+r,n.innerHTML="<span class='octicon octicon-link'></span>",n.title="Permalink",n))}}var t=document.getElementsByClassName("docs")[0];if(t)for(var r=1;r<=6;r++)e(r,t)}},3829:(e,t,r)=>{var n=r(3522);e.exports=function(){var e="/".concat(location.pathname.split("/")[1]);e.length&&document.querySelectorAll("nav a").forEach((function(t){var r=n(t.getAttribute("data-href-match")||t.getAttribute("href"));new RegExp("^".concat(r,"/?.*?")).test(e)&&t.classList.add("active")}))}},779:(e,t,r)=>{function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(3279),o=r(1336),s=r(7563),a=r(5193),l=r(6073),c=function(){function e(t,r){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.input=r,this.index=this.buildIndex(t),this.referenceList=t.cloneNode(!0),this.referenceList.querySelectorAll("img[data-src]").forEach(l.addImage),this.totalAppCount=this.referenceList.querySelectorAll(".listed-app").length,this.input.addEventListener("input",i((function(e){return n.search(e.target.value)}),250)),this.search(this.input.value)}var t,r,s;return t=e,s=[{key:"create",value:function(t,r){return new e(t,r)}}],(r=[{key:"search",value:function(e){try{var t=this.index.search(e);this.updateList(t)}catch(e){"QueryParseError"===e.name||console.error(e)}}},{key:"updateList",value:function(e){var t,r=this,n=document.querySelector(".filterable-list"),i=n.parentElement;e.length===this.totalAppCount?t=this.referenceList.cloneNode(!0):(t=this.referenceList.cloneNode(!1),e.forEach((function(e){var i=n.querySelector('[data-search-id="'.concat(e.ref,'"]'));i||(i=r.referenceList.querySelector('[data-search-id="'.concat(e.ref,'"]')));var o=i.cloneNode(!0);t.appendChild(o)}))),a({q:this.input.value}),i.replaceChild(t,n),t.querySelectorAll("img[data-src]").forEach(l.addImage)}},{key:"buildIndex",value:function(e){var t=this,r=new o.Builder;return r.pipeline.add(o.trimmer,o.stopWordFilter),r.searchPipeline.add((function(e){return e.update((function(e){return"*"!==e[e.length-1]?e+"*":e}))})),r.field("name",{boost:5}),r.field("description"),r.field("addDate"),r.field("releaseDate"),r.field("keywords",{boost:2}),e.querySelectorAll(".listed-app").forEach((function(e,n){var i=t.docForEntry(n,e);r.add(i),e.setAttribute("data-search-id",n)})),r.build()}},{key:"docForEntry",value:function(e,t){var r=t.querySelector(".listed-app-name").textContent,n=t.querySelector(".listed-app-description").textContent,i=t.querySelector(".listed-app-add-date [data-date]"),o=null!=i?i.getAttribute("data-date"):void 0,s=t.querySelector(".listed-app-release-date [data-date]");return{id:e,name:r,description:n,addDate:o,releaseDate:null!=s?s.getAttribute("data-date"):void 0,keywords:t.querySelector(".listed-app-keywords").textContent.split(",")}}}])&&n(t.prototype,r),s&&n(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=function(){var e=document.querySelector(".filterable-list");if(e&&e.parentElement){var t=document.querySelector(".filterable-list-input");t.value=s.parse(location.search).q||"",c.create(e,t)}}},5121:e=>{var t={deprecated:"Deprecated",experimental:"Experimental",platforms:["macOS","Linux","Windows"],readonly:"Readonly"};function r(e){"A"===e.parentNode.nodeName&&e.parentNode.parentNode.appendChild(e)}e.exports=function(){document.querySelectorAll(".docs em").forEach((function(e){if(e.textContent===t.experimental){e.classList.add("flag-label"),r(e);var n=document.createElement("a");n.innerHTML=e.outerHTML,n.setAttribute("href","../experimental"),e.parentNode.appendChild(n),e.remove()}else e.textContent===t.deprecated||e.textContent===t.readonly?(e.classList.add("flag-label"),r(e)):t.platforms.includes(e.textContent)&&(e.classList.add("platform-label"),r(e))}))}},7327:e=>{e.exports=function(){document.querySelectorAll('.docs div.sub-section:not([data-lang="en-US"])').length>0&&Array.from(document.querySelectorAll(".docs .en-toggle")).forEach((function(e){e.onclick=function(e){for(var t=e.target;t&&!t.matches("div.sub-section");)t=t.parentElement;var r=document.querySelector('[data-name="'.concat(t.dataset.name,'"].hidden'));r&&(r.classList.remove("hidden"),t.classList.add("hidden"))}}))}},2472:(e,t,r)=>{var n=r(2866);e.exports=function(){var e=document.querySelector(".docs__table-of-contents");e&&(n.init({tocSelector:".docs__table-of-contents",linkClass:"table-of-contents__link",activeLinkClass:"table-of-contents__link--active",listClass:"table-of-contents__list",listItemClass:"table-of-contents__list-item",contentSelector:".markdown-body",headingSelector:"h2, h3, h4, h5, h6",hasInnerContainers:!0,collapseDepth:6,disableTocScrollSync:!0,headingLabelCallback:function(e){if(!window.location.pathname.startsWith("/docs/api/"))return e;var t=e.match(/Event: '([a-z]*(?:-[a-z]+)*)'/),r=e.match(/^[a-zA-Z]+\.((?:[a-zA-Z]+[\.]?)+)/);return t?t[1]:r?r[1]:e}}),e.hasChildNodes()||e.closest(".docs__nav-wrapper").remove())}},9702:e=>{function t(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,o=function(){};return{s:o,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw s}}}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var n=["expanded-version"],i=["shrunk-version"];e.exports=function(){var e,r=document.querySelectorAll(".electron-version"),o=function(){var e,o=t(r);try{for(o.s();!(e=o.n()).done;){var s,a,l=e.value;(s=l.classList).remove.apply(s,n),(a=l.classList).remove.apply(a,i)}}catch(e){o.e(e)}finally{o.f()}},s=function(e){var s,a;o();var l,c=t(r);try{for(c.s();!(l=c.n()).done;){var u;(u=l.value.classList).add.apply(u,i)}}catch(e){c.e(e)}finally{c.f()}(s=e.classList).remove.apply(s,i),(a=e.classList).add.apply(a,n)},a=function(e){var t=e.target;if(document.selection)(r=document.body.createTextRange()).moveToElementText(t),r.select();else if(window.getSelection){var r;(r=document.createRange()).selectNode(t),window.getSelection().removeAllRanges(),window.getSelection().addRange(r)}},l=t(r);try{for(l.s();!(e=l.n()).done;){var c=e.value;c.addEventListener("mouseover",s.bind(null,c)),c.addEventListener("mouseout",o),c.addEventListener("click",a)}}catch(e){l.e(e)}finally{l.f()}}},8120:(e,t,r)=>{var n=r(6968);e.exports=function(){window.localized=Array.from(document.querySelectorAll('meta[name^="localized"]')).reduce((function(e,t){var r=t.getAttribute("name").replace("localized.",""),i=t.getAttribute("content");return n(e,r,i),e}),{})}},9376:e=>{e.exports=function(){document.querySelectorAll("[data-toggle-target]").forEach((function(e){e.addEventListener("click",(function(){var t=e.getAttribute("data-toggle-target");document.querySelectorAll(t).forEach((function(e){e.classList.toggle("d-none")}))}))}))}},3859:e=>{e.exports=function(){var e=document.getElementById("kb-shortcut-dialog"),t=e.getElementsByClassName("close")[0];window.addEventListener("keydown",(function(t){"?"===t.key&&(null!==t.target&&"INPUT"===t.target.tagName||(e.style.display="block",t.stopImmediatePropagation(),t.preventDefault())),"block"===e.style.display&&27===t.keyCode&&(e.style.display="none",t.stopImmediatePropagation(),t.preventDefault())}),!0),window.addEventListener("click",(function(t){t.target===e&&(e.style.display="none")}),!0),t.addEventListener("click",(function(){e.style.display="none"}),!0)}},7924:e=>{e.exports=function(){function e(e){var r=t.scrollHeight;e.style.height="".concat(r,"px")}var t=document.getElementById("languages-header-menu"),r=document.querySelector(".site-header-nav .lang-select-button");window.addEventListener("resize",(function(){t.classList.contains("collapsed")||e(t)})),r&&r.addEventListener("click",(function(n){n.ctrlKey||n.metaKey||(n.preventDefault(),t.classList.toggle("collapsed"),t.classList.contains("collapsed")?(t.style.height="0px",t.style.visibility="hidden",r.setAttribute("aria-expanded",!1)):(t.style.visibility="visible",e(t),r.setAttribute("aria-expanded",!0),t.focus()))}))}},6073:(e,t,r)=>{var n=r(3493);e.exports=function(){["scroll","resize","load"].forEach((function(e){return window.addEventListener(e,s)})),document.querySelectorAll("img[data-src]").forEach(o)};var i=[],o=e.exports.addImage=function(e){e.dataset.src&&(i.push(e),s())},s=e.exports.updateImages=n((function(){i=i.filter((function(e){return r=(t=e.getBoundingClientRect()).top,n=t.right,i=t.bottom,o=t.left,!(i>0&&window.innerWidth-o>0&&window.innerHeight-r>0&&n>0&&(function(e){e.dataset.src&&(e.setAttribute("src",e.dataset.src),e.onload=function(){e.removeAttribute("data-src");var t=e.parentElement.querySelector(".placeholder");t&&t.classList.add("faded-out")})}(e),1));var t,r,n,i,o}))}),100)},7899:(e,t,r)=>{var n=r(9813).getPlatformFromUserAgent;e.exports=function(){var e=n();Array.from(document.querySelectorAll(".".concat(e,"-only"))).forEach((function(e){var t=Array.from(e.classList).find((function(e){return e.startsWith("display-")}));t=t?t.replace("display-",""):"block",e.style.display=t}))}},9780:(e,t,r)=>{var n=r(5267);e.exports=function(){document.querySelectorAll("a[href^=http]").forEach((function(e){e.textContent.startsWith("http")&&(e.textContent=n(e.textContent))}))}},5317:e=>{e.exports=function(){document.querySelectorAll("[data-sc-name]").forEach((function(e){e.addEventListener("click",(function(){var t=e.getAttribute("data-sc-name"),r=e.getAttribute("data-sc-category");r||(r="general"),function(e,t){ga("send","event",e,t)}(r,t)}))}))}},7229:e=>{e.exports=function(){var e=document.querySelector(".active-screenshot img"),t=document.querySelectorAll(".app-screenshot-thumb");if(e)if(0!==t.length){for(var r=0;r<t.length;r++){var n=t[r].querySelector("img");t[r].addEventListener("click",i(n))}i(t[0].querySelector("img"))()}else document.querySelector(".app-screenshots").style.display="none";function i(t){return function(){e.src=t.src,e.alt=t.alt}}}},5515:e=>{e.exports=function(){var e=document.querySelector(".app-meta");function t(){e.getBoundingClientRect().height<window.innerHeight?e.classList.add("sticky"):e.classList.remove("sticky")}e&&(window.addEventListener("resize",t),t())}},1526:(e,t,r)=>{var n=r(9813),i=n.getPlatformFromUserAgent,o=n.getPlatformLabel;e.exports=function(){var e=Array.from(document.querySelectorAll("a.app-download"));if(e.length){var t=i(),r=e.filter((function(e){return e.classList.contains(t)}));r.length||(e[0].parentNode.style.display="none"),e.forEach((function(e){e.style.display=e.classList.contains(t)?"inline-block":"none"})),1===r.length&&(r[0].textContent="Download for ".concat(o(t))),e.length>1&&(document.querySelector("#view-all-downloads").style.display="block")}}},5444:(e,t,r)=>{var n=r(9813),i=n.getPlatformFromUserAgent,o=n.getPlatformLabel;e.exports=function(){if(document.querySelector("#download-latest-release")){var e,t=i();if(t)"darwin"===t&&(e="electron-api-demos-mac.zip"),"win32"===t&&(e="ElectronAPIDemosSetup.exe"),"linux"===t&&(e="electron-api-demos-linux.zip"),document.querySelector("#download-latest-release").setAttribute("href","https://electron-api-demos.githubapp.com/updates/"+e),document.querySelector("#download-latest-release .label").textContent="Download for "+o(t),document.querySelector("#download-alternatives").style.display="inline-block"}}},2132:(e,t,r)=>{var n=r(5093),i=r(2001),o=r(3449);e.exports=function(){s(),n(s),setInterval(s,5e3)};var s=function(){var e=document.querySelectorAll("[data-date]");Array.prototype.forEach.call(e,(function(e){var t;if(e.dataset.date.match(/^\d{4}-\d{2}-\d{2}$/)){var r=e.dataset.date.split("-");t=new Date(r[0],r[1]-1,r[2])}else t=new Date(e.dataset.date);if(!t.getFullYear())return console.error("Invalid date",e.dataset.date);var n=e.dataset.format||"relative",s="relative"===n?o(t):i(n,t);e.textContent=s}))}},2152:function(e){var t;t=function(){return function(){var e={686:function(e,t,r){"use strict";r.d(t,{default:function(){return w}});var n=r(279),i=r.n(n),o=r(370),s=r.n(o),a=r(817),l=r.n(a);function c(e){try{return document.execCommand(e)}catch(e){return!1}}var u=function(e){var t=l()(e);return c("cut"),t};function d(e){var t="rtl"===document.documentElement.getAttribute("dir"),r=document.createElement("textarea");r.style.fontSize="12pt",r.style.border="0",r.style.padding="0",r.style.margin="0",r.style.position="absolute",r.style[t?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;return r.style.top="".concat(n,"px"),r.setAttribute("readonly",""),r.value=e,r}var f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{container:document.body},r="";if("string"==typeof e){var n=d(e);t.container.appendChild(n),r=l()(n),c("copy"),n.remove()}else r=l()(e),c("copy");return r};function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){var r="data-clipboard-".concat(e);if(t.hasAttribute(r))return t.getAttribute(r)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(l,e);var t,r,n,i,o,a=(i=l,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=g(i);if(o){var r=g(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return v(this,e)});function l(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(r=a.call(this)).resolveOptions(t),r.listenClick(e),r}return t=l,n=[{key:"copy",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{container:document.body};return f(e,t)}},{key:"cut",value:function(e){return u(e)}},{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,r=!!document.queryCommandSupported;return t.forEach((function(e){r=r&&!!document.queryCommandSupported(e)})),r}}],(r=[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===h(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=s()(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget,r=this.action(t)||"copy",n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.action,r=void 0===t?"copy":t,n=e.container,i=e.target,o=e.text;if("copy"!==r&&"cut"!==r)throw new Error('Invalid "action" value, use either "copy" or "cut"');if(void 0!==i){if(!i||"object"!==p(i)||1!==i.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===r&&i.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===r&&(i.hasAttribute("readonly")||i.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes')}return o?f(o,{container:n}):i?"cut"===r?u(i):f(i,{container:n}):void 0}({action:r,container:this.container,target:this.target(t),text:this.text(t)});this.emit(n?"success":"error",{action:r,text:n,trigger:t,clearSelection:function(){t&&t.focus(),document.activeElement.blur(),window.getSelection().removeAllRanges()}})}},{key:"defaultAction",value:function(e){return b("action",e)}},{key:"defaultTarget",value:function(e){var t=b("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return b("text",e)}},{key:"destroy",value:function(){this.listener.destroy()}}])&&m(t.prototype,r),n&&m(t,n),l}(i())},828:function(e){if("undefined"!=typeof Element&&!Element.prototype.matches){var t=Element.prototype;t.matches=t.matchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector}e.exports=function(e,t){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}},438:function(e,t,r){var n=r(828);function i(e,t,r,n,i){var s=o.apply(this,arguments);return e.addEventListener(r,s,i),{destroy:function(){e.removeEventListener(r,s,i)}}}function o(e,t,r,i){return function(r){r.delegateTarget=n(r.target,t),r.delegateTarget&&i.call(e,r)}}e.exports=function(e,t,r,n,o){return"function"==typeof e.addEventListener?i.apply(null,arguments):"function"==typeof r?i.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return i(e,t,r,n,o)})))}},879:function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var r=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===r||"[object HTMLCollection]"===r)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},370:function(e,t,r){var n=r(879),i=r(438);e.exports=function(e,t,r){if(!e&&!t&&!r)throw new Error("Missing required arguments");if(!n.string(t))throw new TypeError("Second argument must be a String");if(!n.fn(r))throw new TypeError("Third argument must be a Function");if(n.node(e))return function(e,t,r){return e.addEventListener(t,r),{destroy:function(){e.removeEventListener(t,r)}}}(e,t,r);if(n.nodeList(e))return function(e,t,r){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,r)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,r)}))}}}(e,t,r);if(n.string(e))return function(e,t,r){return i(document.body,e,t,r)}(e,t,r);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},817:function(e){e.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var r=e.hasAttribute("readonly");r||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),r||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var n=window.getSelection(),i=document.createRange();i.selectNodeContents(e),n.removeAllRanges(),n.addRange(i),t=n.toString()}return t}},279:function(e){function t(){}t.prototype={on:function(e,t,r){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:r}),this},once:function(e,t,r){var n=this;function i(){n.off(e,i),t.apply(r,arguments)}return i._=t,this.on(e,i,r)},emit:function(e){for(var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),n=0,i=r.length;n<i;n++)r[n].fn.apply(r[n].ctx,t);return this},off:function(e,t){var r=this.e||(this.e={}),n=r[e],i=[];if(n&&t)for(var o=0,s=n.length;o<s;o++)n[o].fn!==t&&n[o].fn._!==t&&i.push(n[o]);return i.length?r[e]=i:delete r[e],this}},e.exports=t,e.exports.TinyEmitter=t}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}return r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},r.d=function(e,t){for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r(686)}().default},e.exports=t()},4020:e=>{"use strict";var t="%[a-f0-9]{2}",r=new RegExp(t,"gi"),n=new RegExp("("+t+")+","gi");function i(e,t){try{return decodeURIComponent(e.join(""))}catch(e){}if(1===e.length)return e;t=t||1;var r=e.slice(0,t),n=e.slice(t);return Array.prototype.concat.call([],i(r),i(n))}function o(e){try{return decodeURIComponent(e)}catch(o){for(var t=e.match(r),n=1;n<t.length;n++)t=(e=i(t,n).join("")).match(r);return e}}e.exports=function(e){if("string"!=typeof e)throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof e+"`");try{return e=e.replace(/\+/g," "),decodeURIComponent(e)}catch(t){return function(e){for(var t={"%FE%FF":"��","%FF%FE":"��"},r=n.exec(e);r;){try{t[r[0]]=decodeURIComponent(r[0])}catch(e){var i=o(r[0]);i!==r[0]&&(t[r[0]]=i)}r=n.exec(e)}t["%C2"]="�";for(var s=Object.keys(t),a=0;a<s.length;a++){var l=s[a];e=e.replace(new RegExp(l,"g"),t[l])}return e}(e)}}},5093:e=>{var t,r,n,i,o,s;e.exports=(r=[],i=(n=document).documentElement.doScroll,o="DOMContentLoaded",(s=(i?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState))||n.addEventListener(o,t=function(){for(n.removeEventListener(o,t),s=1;t=r.shift();)t()}),function(e){s?setTimeout(e,0):r.push(e)})},2806:e=>{"use strict";e.exports=function(e,t){for(var r={},n=Object.keys(e),i=Array.isArray(t),o=0;o<n.length;o++){var s=n[o],a=e[s];(i?-1!==t.indexOf(s):t(s,a,e))&&(r[s]=a)}return r}},1989:(e,t,r)=>{var n=r(1789),i=r(401),o=r(7667),s=r(1327),a=r(1866);function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,e.exports=l},8407:(e,t,r)=>{var n=r(7040),i=r(4125),o=r(2117),s=r(7518),a=r(4705);function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,e.exports=l},7071:(e,t,r)=>{var n=r(852)(r(5639),"Map");e.exports=n},3369:(e,t,r)=>{var n=r(4785),i=r(1285),o=r(6e3),s=r(9916),a=r(5265);function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=a,e.exports=l},2705:(e,t,r)=>{var n=r(5639).Symbol;e.exports=n},9932:e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}},4865:(e,t,r)=>{var n=r(9465),i=r(7813),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,r){var s=e[t];o.call(e,t)&&i(s,r)&&(void 0!==r||t in e)||n(e,t,r)}},8470:(e,t,r)=>{var n=r(7813);e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},9465:(e,t,r)=>{var n=r(8777);e.exports=function(e,t,r){"__proto__"==t&&n?n(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}},4239:(e,t,r)=>{var n=r(2705),i=r(9607),o=r(2333),s=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":s&&s in Object(e)?i(e):o(e)}},8458:(e,t,r)=>{var n=r(3560),i=r(5346),o=r(3218),s=r(346),a=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,f=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(n(e)?f:a).test(s(e))}},611:(e,t,r)=>{var n=r(4865),i=r(1811),o=r(5776),s=r(3218),a=r(327);e.exports=function(e,t,r,l){if(!s(e))return e;for(var c=-1,u=(t=i(t,e)).length,d=u-1,f=e;null!=f&&++c<u;){var p=a(t[c]),h=r;if("__proto__"===p||"constructor"===p||"prototype"===p)return e;if(c!=d){var m=f[p];void 0===(h=l?l(m,p,f):void 0)&&(h=s(m)?m:o(t[c+1])?[]:{})}n(f,p,h),f=f[p]}return e}},531:(e,t,r)=>{var n=r(2705),i=r(9932),o=r(1469),s=r(3448),a=n?n.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(s(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}},7561:(e,t,r)=>{var n=r(7990),i=/^\s+/;e.exports=function(e){return e?e.slice(0,n(e)+1).replace(i,""):e}},1811:(e,t,r)=>{var n=r(1469),i=r(5403),o=r(5514),s=r(9833);e.exports=function(e,t){return n(e)?e:i(e,t)?[e]:o(s(e))}},4429:(e,t,r)=>{var n=r(5639)["__core-js_shared__"];e.exports=n},8777:(e,t,r)=>{var n=r(852),i=function(){try{var e=n(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},1957:(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},5050:(e,t,r)=>{var n=r(7019);e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},852:(e,t,r)=>{var n=r(8458),i=r(7801);e.exports=function(e,t){var r=i(e,t);return n(r)?r:void 0}},9607:(e,t,r)=>{var n=r(2705),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=o.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var i=s.call(e);return n&&(t?e[a]=r:delete e[a]),i}},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},1789:(e,t,r)=>{var n=r(4536);e.exports=function(){this.__data__=n?n(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,r)=>{var n=r(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return i.call(t,e)?t[e]:void 0}},1327:(e,t,r)=>{var n=r(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:i.call(t,e)}},1866:(e,t,r)=>{var n=r(4536);e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},5403:(e,t,r)=>{var n=r(1469),i=r(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!i(e))||s.test(e)||!o.test(e)||null!=t&&e in Object(t)}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,r)=>{var n,i=r(4429),o=(n=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!o&&o in e}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,r)=>{var n=r(8470),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0||(r==t.length-1?t.pop():i.call(t,r,1),--this.size,0))}},2117:(e,t,r)=>{var n=r(8470);e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},7518:(e,t,r)=>{var n=r(8470);e.exports=function(e){return n(this.__data__,e)>-1}},4705:(e,t,r)=>{var n=r(8470);e.exports=function(e,t){var r=this.__data__,i=n(r,e);return i<0?(++this.size,r.push([e,t])):r[i][1]=t,this}},4785:(e,t,r)=>{var n=r(1989),i=r(8407),o=r(7071);e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(o||i),string:new n}}},1285:(e,t,r)=>{var n=r(5050);e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,r)=>{var n=r(5050);e.exports=function(e){return n(this,e).get(e)}},9916:(e,t,r)=>{var n=r(5050);e.exports=function(e){return n(this,e).has(e)}},5265:(e,t,r)=>{var n=r(5050);e.exports=function(e,t){var r=n(this,e),i=r.size;return r.set(e,t),this.size+=r.size==i?0:1,this}},4523:(e,t,r)=>{var n=r(8306);e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},4536:(e,t,r)=>{var n=r(852)(Object,"create");e.exports=n},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5639:(e,t,r)=>{var n=r(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=n||i||Function("return this")();e.exports=o},5514:(e,t,r)=>{var n=r(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,s=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(i,(function(e,r,n,i){t.push(n?i.replace(o,"$1"):r||e)})),t}));e.exports=s},327:(e,t,r)=>{var n=r(3448);e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7990:e=>{var t=/\s/;e.exports=function(e){for(var r=e.length;r--&&t.test(e.charAt(r)););return r}},3279:(e,t,r)=>{var n=r(3218),i=r(7771),o=r(4841),s=Math.max,a=Math.min;e.exports=function(e,t,r){var l,c,u,d,f,p,h=0,m=!1,y=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var r=l,n=c;return l=c=void 0,h=t,d=e.apply(n,r)}function b(e){return h=e,f=setTimeout(x,t),m?g(e):d}function w(e){var r=e-p;return void 0===p||r>=t||r<0||y&&e-h>=u}function x(){var e=i();if(w(e))return S(e);f=setTimeout(x,function(e){var r=t-(e-p);return y?a(r,u-(e-h)):r}(e))}function S(e){return f=void 0,v&&l?g(e):(l=c=void 0,d)}function k(){var e=i(),r=w(e);if(l=arguments,c=this,p=e,r){if(void 0===f)return b(p);if(y)return clearTimeout(f),f=setTimeout(x,t),g(p)}return void 0===f&&(f=setTimeout(x,t)),d}return t=o(t)||0,n(r)&&(m=!!r.leading,u=(y="maxWait"in r)?s(o(r.maxWait)||0,t):u,v="trailing"in r?!!r.trailing:v),k.cancel=function(){void 0!==f&&clearTimeout(f),h=0,l=p=c=f=void 0},k.flush=function(){return void 0===f?d:S(i())},k}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},3522:(e,t,r)=>{var n=r(9833),i=/[\\^$.*+?()[\]{}|]/g,o=RegExp(i.source);e.exports=function(e){return(e=n(e))&&o.test(e)?e.replace(i,"\\$&"):e}},1469:e=>{var t=Array.isArray;e.exports=t},3560:(e,t,r)=>{var n=r(4239),i=r(3218);e.exports=function(e){if(!i(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},3448:(e,t,r)=>{var n=r(4239),i=r(7005);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==n(e)}},8306:(e,t,r)=>{var n=r(3369);function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=e.apply(this,n);return r.cache=o.set(i,s)||o,s};return r.cache=new(i.Cache||n),r}i.Cache=n,e.exports=i},7771:(e,t,r)=>{var n=r(5639);e.exports=function(){return n.Date.now()}},6968:(e,t,r)=>{var n=r(611);e.exports=function(e,t,r){return null==e?e:n(e,t,r)}},3493:(e,t,r)=>{var n=r(3279),i=r(3218);e.exports=function(e,t,r){var o=!0,s=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return i(r)&&(o="leading"in r?!!r.leading:o,s="trailing"in r?!!r.trailing:s),n(e,t,{leading:o,maxWait:t,trailing:s})}},4841:(e,t,r)=>{var n=r(7561),i=r(3218),o=r(3448),s=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(i(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=n(e);var r=a.test(e);return r||l.test(e)?c(e.slice(2),r?2:8):s.test(e)?NaN:+e}},9833:(e,t,r)=>{var n=r(531);e.exports=function(e){return null==e?"":n(e)}},1336:(e,t,r)=>{var n,i;!function(){var o,s,a,l,c,u,d,f,p,h,m,y,v,g,b,w,x,S,k,E,T,C,L,A,_,O,M=function(e){var t=new M.Builder;return t.pipeline.add(M.trimmer,M.stopWordFilter,M.stemmer),t.searchPipeline.add(M.stemmer),e.call(t,t),t.build()};M.version="2.3.9",M.utils={},M.utils.warn=(o=this,function(e){o.console&&console.warn&&console.warn(e)}),M.utils.asString=function(e){return null==e?"":e.toString()},M.utils.clone=function(e){if(null==e)return e;for(var t=Object.create(null),r=Object.keys(e),n=0;n<r.length;n++){var i=r[n],o=e[i];if(Array.isArray(o))t[i]=o.slice();else{if("string"!=typeof o&&"number"!=typeof o&&"boolean"!=typeof o)throw new TypeError("clone is not deep and does not support nested objects");t[i]=o}}return t},M.FieldRef=function(e,t,r){this.docRef=e,this.fieldName=t,this._stringValue=r},M.FieldRef.joiner="/",M.FieldRef.fromString=function(e){var t=e.indexOf(M.FieldRef.joiner);if(-1===t)throw"malformed field ref string";var r=e.slice(0,t),n=e.slice(t+1);return new M.FieldRef(n,r,e)},M.FieldRef.prototype.toString=function(){return null==this._stringValue&&(this._stringValue=this.fieldName+M.FieldRef.joiner+this.docRef),this._stringValue},M.Set=function(e){if(this.elements=Object.create(null),e){this.length=e.length;for(var t=0;t<this.length;t++)this.elements[e[t]]=!0}else this.length=0},M.Set.complete={intersect:function(e){return e},union:function(){return this},contains:function(){return!0}},M.Set.empty={intersect:function(){return this},union:function(e){return e},contains:function(){return!1}},M.Set.prototype.contains=function(e){return!!this.elements[e]},M.Set.prototype.intersect=function(e){var t,r,n,i=[];if(e===M.Set.complete)return this;if(e===M.Set.empty)return e;this.length<e.length?(t=this,r=e):(t=e,r=this),n=Object.keys(t.elements);for(var o=0;o<n.length;o++){var s=n[o];s in r.elements&&i.push(s)}return new M.Set(i)},M.Set.prototype.union=function(e){return e===M.Set.complete?M.Set.complete:e===M.Set.empty?this:new M.Set(Object.keys(this.elements).concat(Object.keys(e.elements)))},M.idf=function(e,t){var r=0;for(var n in e)"_index"!=n&&(r+=Object.keys(e[n]).length);var i=(t-r+.5)/(r+.5);return Math.log(1+Math.abs(i))},M.Token=function(e,t){this.str=e||"",this.metadata=t||{}},M.Token.prototype.toString=function(){return this.str},M.Token.prototype.update=function(e){return this.str=e(this.str,this.metadata),this},M.Token.prototype.clone=function(e){return e=e||function(e){return e},new M.Token(e(this.str,this.metadata),this.metadata)},M.tokenizer=function(e,t){if(null==e||null==e)return[];if(Array.isArray(e))return e.map((function(e){return new M.Token(M.utils.asString(e).toLowerCase(),M.utils.clone(t))}));for(var r=e.toString().toLowerCase(),n=r.length,i=[],o=0,s=0;o<=n;o++){var a=o-s;if(r.charAt(o).match(M.tokenizer.separator)||o==n){if(a>0){var l=M.utils.clone(t)||{};l.position=[s,a],l.index=i.length,i.push(new M.Token(r.slice(s,o),l))}s=o+1}}return i},M.tokenizer.separator=/[\s\-]+/,M.Pipeline=function(){this._stack=[]},M.Pipeline.registeredFunctions=Object.create(null),M.Pipeline.registerFunction=function(e,t){t in this.registeredFunctions&&M.utils.warn("Overwriting existing registered function: "+t),e.label=t,M.Pipeline.registeredFunctions[e.label]=e},M.Pipeline.warnIfFunctionNotRegistered=function(e){e.label&&e.label in this.registeredFunctions||M.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},M.Pipeline.load=function(e){var t=new M.Pipeline;return e.forEach((function(e){var r=M.Pipeline.registeredFunctions[e];if(!r)throw new Error("Cannot load unregistered function: "+e);t.add(r)})),t},M.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach((function(e){M.Pipeline.warnIfFunctionNotRegistered(e),this._stack.push(e)}),this)},M.Pipeline.prototype.after=function(e,t){M.Pipeline.warnIfFunctionNotRegistered(t);var r=this._stack.indexOf(e);if(-1==r)throw new Error("Cannot find existingFn");r+=1,this._stack.splice(r,0,t)},M.Pipeline.prototype.before=function(e,t){M.Pipeline.warnIfFunctionNotRegistered(t);var r=this._stack.indexOf(e);if(-1==r)throw new Error("Cannot find existingFn");this._stack.splice(r,0,t)},M.Pipeline.prototype.remove=function(e){var t=this._stack.indexOf(e);-1!=t&&this._stack.splice(t,1)},M.Pipeline.prototype.run=function(e){for(var t=this._stack.length,r=0;r<t;r++){for(var n=this._stack[r],i=[],o=0;o<e.length;o++){var s=n(e[o],o,e);if(null!=s&&""!==s)if(Array.isArray(s))for(var a=0;a<s.length;a++)i.push(s[a]);else i.push(s)}e=i}return e},M.Pipeline.prototype.runString=function(e,t){var r=new M.Token(e,t);return this.run([r]).map((function(e){return e.toString()}))},M.Pipeline.prototype.reset=function(){this._stack=[]},M.Pipeline.prototype.toJSON=function(){return this._stack.map((function(e){return M.Pipeline.warnIfFunctionNotRegistered(e),e.label}))},M.Vector=function(e){this._magnitude=0,this.elements=e||[]},M.Vector.prototype.positionForIndex=function(e){if(0==this.elements.length)return 0;for(var t=0,r=this.elements.length/2,n=r-t,i=Math.floor(n/2),o=this.elements[2*i];n>1&&(o<e&&(t=i),o>e&&(r=i),o!=e);)n=r-t,i=t+Math.floor(n/2),o=this.elements[2*i];return o==e||o>e?2*i:o<e?2*(i+1):void 0},M.Vector.prototype.insert=function(e,t){this.upsert(e,t,(function(){throw"duplicate index"}))},M.Vector.prototype.upsert=function(e,t,r){this._magnitude=0;var n=this.positionForIndex(e);this.elements[n]==e?this.elements[n+1]=r(this.elements[n+1],t):this.elements.splice(n,0,e,t)},M.Vector.prototype.magnitude=function(){if(this._magnitude)return this._magnitude;for(var e=0,t=this.elements.length,r=1;r<t;r+=2){var n=this.elements[r];e+=n*n}return this._magnitude=Math.sqrt(e)},M.Vector.prototype.dot=function(e){for(var t=0,r=this.elements,n=e.elements,i=r.length,o=n.length,s=0,a=0,l=0,c=0;l<i&&c<o;)(s=r[l])<(a=n[c])?l+=2:s>a?c+=2:s==a&&(t+=r[l+1]*n[c+1],l+=2,c+=2);return t},M.Vector.prototype.similarity=function(e){return this.dot(e)/this.magnitude()||0},M.Vector.prototype.toArray=function(){for(var e=new Array(this.elements.length/2),t=1,r=0;t<this.elements.length;t+=2,r++)e[r]=this.elements[t];return e},M.Vector.prototype.toJSON=function(){return this.elements},M.stemmer=(s={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},a={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},l="[aeiouy]",c="[^aeiou][^aeiouy]*",u=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),d=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*[aeiouy][aeiou]*[^aeiou][^aeiouy]*"),f=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy][aeiou]*[^aeiou][^aeiouy]*([aeiouy][aeiou]*)?$"),p=new RegExp("^([^aeiou][^aeiouy]*)?[aeiouy]"),h=/^(.+?)(ss|i)es$/,m=/^(.+?)([^s])s$/,y=/^(.+?)eed$/,v=/^(.+?)(ed|ing)$/,g=/.$/,b=/(at|bl|iz)$/,w=new RegExp("([^aeiouylsz])\\1$"),x=new RegExp("^"+c+l+"[^aeiouwxy]$"),S=/^(.+?[^aeiou])y$/,k=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,T=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,C=/^(.+?)(s|t)(ion)$/,L=/^(.+?)e$/,A=/ll$/,_=new RegExp("^"+c+l+"[^aeiouwxy]$"),O=function(e){var t,r,n,i,o,l,c;if(e.length<3)return e;if("y"==(n=e.substr(0,1))&&(e=n.toUpperCase()+e.substr(1)),o=m,(i=h).test(e)?e=e.replace(i,"$1$2"):o.test(e)&&(e=e.replace(o,"$1$2")),o=v,(i=y).test(e)){var O=i.exec(e);(i=u).test(O[1])&&(i=g,e=e.replace(i,""))}else o.test(e)&&(t=(O=o.exec(e))[1],(o=p).test(t)&&(l=w,c=x,(o=b).test(e=t)?e+="e":l.test(e)?(i=g,e=e.replace(i,"")):c.test(e)&&(e+="e")));return(i=S).test(e)&&(e=(t=(O=i.exec(e))[1])+"i"),(i=k).test(e)&&(t=(O=i.exec(e))[1],r=O[2],(i=u).test(t)&&(e=t+s[r])),(i=E).test(e)&&(t=(O=i.exec(e))[1],r=O[2],(i=u).test(t)&&(e=t+a[r])),o=C,(i=T).test(e)?(t=(O=i.exec(e))[1],(i=d).test(t)&&(e=t)):o.test(e)&&(t=(O=o.exec(e))[1]+O[2],(o=d).test(t)&&(e=t)),(i=L).test(e)&&(t=(O=i.exec(e))[1],o=f,l=_,((i=d).test(t)||o.test(t)&&!l.test(t))&&(e=t)),o=d,(i=A).test(e)&&o.test(e)&&(i=g,e=e.replace(i,"")),"y"==n&&(e=n.toLowerCase()+e.substr(1)),e},function(e){return e.update(O)}),M.Pipeline.registerFunction(M.stemmer,"stemmer"),M.generateStopWordFilter=function(e){var t=e.reduce((function(e,t){return e[t]=t,e}),{});return function(e){if(e&&t[e.toString()]!==e.toString())return e}},M.stopWordFilter=M.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),M.Pipeline.registerFunction(M.stopWordFilter,"stopWordFilter"),M.trimmer=function(e){return e.update((function(e){return e.replace(/^\W+/,"").replace(/\W+$/,"")}))},M.Pipeline.registerFunction(M.trimmer,"trimmer"),M.TokenSet=function(){this.final=!1,this.edges={},this.id=M.TokenSet._nextId,M.TokenSet._nextId+=1},M.TokenSet._nextId=1,M.TokenSet.fromArray=function(e){for(var t=new M.TokenSet.Builder,r=0,n=e.length;r<n;r++)t.insert(e[r]);return t.finish(),t.root},M.TokenSet.fromClause=function(e){return"editDistance"in e?M.TokenSet.fromFuzzyString(e.term,e.editDistance):M.TokenSet.fromString(e.term)},M.TokenSet.fromFuzzyString=function(e,t){for(var r=new M.TokenSet,n=[{node:r,editsRemaining:t,str:e}];n.length;){var i=n.pop();if(i.str.length>0){var o,s=i.str.charAt(0);s in i.node.edges?o=i.node.edges[s]:(o=new M.TokenSet,i.node.edges[s]=o),1==i.str.length&&(o.final=!0),n.push({node:o,editsRemaining:i.editsRemaining,str:i.str.slice(1)})}if(0!=i.editsRemaining){if("*"in i.node.edges)var a=i.node.edges["*"];else a=new M.TokenSet,i.node.edges["*"]=a;if(0==i.str.length&&(a.final=!0),n.push({node:a,editsRemaining:i.editsRemaining-1,str:i.str}),i.str.length>1&&n.push({node:i.node,editsRemaining:i.editsRemaining-1,str:i.str.slice(1)}),1==i.str.length&&(i.node.final=!0),i.str.length>=1){if("*"in i.node.edges)var l=i.node.edges["*"];else l=new M.TokenSet,i.node.edges["*"]=l;1==i.str.length&&(l.final=!0),n.push({node:l,editsRemaining:i.editsRemaining-1,str:i.str.slice(1)})}if(i.str.length>1){var c,u=i.str.charAt(0),d=i.str.charAt(1);d in i.node.edges?c=i.node.edges[d]:(c=new M.TokenSet,i.node.edges[d]=c),1==i.str.length&&(c.final=!0),n.push({node:c,editsRemaining:i.editsRemaining-1,str:u+i.str.slice(2)})}}}return r},M.TokenSet.fromString=function(e){for(var t=new M.TokenSet,r=t,n=0,i=e.length;n<i;n++){var o=e[n],s=n==i-1;if("*"==o)t.edges[o]=t,t.final=s;else{var a=new M.TokenSet;a.final=s,t.edges[o]=a,t=a}}return r},M.TokenSet.prototype.toArray=function(){for(var e=[],t=[{prefix:"",node:this}];t.length;){var r=t.pop(),n=Object.keys(r.node.edges),i=n.length;r.node.final&&(r.prefix.charAt(0),e.push(r.prefix));for(var o=0;o<i;o++){var s=n[o];t.push({prefix:r.prefix.concat(s),node:r.node.edges[s]})}}return e},M.TokenSet.prototype.toString=function(){if(this._str)return this._str;for(var e=this.final?"1":"0",t=Object.keys(this.edges).sort(),r=t.length,n=0;n<r;n++){var i=t[n];e=e+i+this.edges[i].id}return e},M.TokenSet.prototype.intersect=function(e){for(var t=new M.TokenSet,r=void 0,n=[{qNode:e,output:t,node:this}];n.length;){r=n.pop();for(var i=Object.keys(r.qNode.edges),o=i.length,s=Object.keys(r.node.edges),a=s.length,l=0;l<o;l++)for(var c=i[l],u=0;u<a;u++){var d=s[u];if(d==c||"*"==c){var f=r.node.edges[d],p=r.qNode.edges[c],h=f.final&&p.final,m=void 0;d in r.output.edges?(m=r.output.edges[d]).final=m.final||h:((m=new M.TokenSet).final=h,r.output.edges[d]=m),n.push({qNode:p,output:m,node:f})}}}return t},M.TokenSet.Builder=function(){this.previousWord="",this.root=new M.TokenSet,this.uncheckedNodes=[],this.minimizedNodes={}},M.TokenSet.Builder.prototype.insert=function(e){var t,r=0;if(e<this.previousWord)throw new Error("Out of order word insertion");for(var n=0;n<e.length&&n<this.previousWord.length&&e[n]==this.previousWord[n];n++)r++;for(this.minimize(r),t=0==this.uncheckedNodes.length?this.root:this.uncheckedNodes[this.uncheckedNodes.length-1].child,n=r;n<e.length;n++){var i=new M.TokenSet,o=e[n];t.edges[o]=i,this.uncheckedNodes.push({parent:t,char:o,child:i}),t=i}t.final=!0,this.previousWord=e},M.TokenSet.Builder.prototype.finish=function(){this.minimize(0)},M.TokenSet.Builder.prototype.minimize=function(e){for(var t=this.uncheckedNodes.length-1;t>=e;t--){var r=this.uncheckedNodes[t],n=r.child.toString();n in this.minimizedNodes?r.parent.edges[r.char]=this.minimizedNodes[n]:(r.child._str=n,this.minimizedNodes[n]=r.child),this.uncheckedNodes.pop()}},M.Index=function(e){this.invertedIndex=e.invertedIndex,this.fieldVectors=e.fieldVectors,this.tokenSet=e.tokenSet,this.fields=e.fields,this.pipeline=e.pipeline},M.Index.prototype.search=function(e){return this.query((function(t){new M.QueryParser(e,t).parse()}))},M.Index.prototype.query=function(e){for(var t=new M.Query(this.fields),r=Object.create(null),n=Object.create(null),i=Object.create(null),o=Object.create(null),s=Object.create(null),a=0;a<this.fields.length;a++)n[this.fields[a]]=new M.Vector;for(e.call(t,t),a=0;a<t.clauses.length;a++){var l,c=t.clauses[a],u=M.Set.empty;l=c.usePipeline?this.pipeline.runString(c.term,{fields:c.fields}):[c.term];for(var d=0;d<l.length;d++){var f=l[d];c.term=f;var p=M.TokenSet.fromClause(c),h=this.tokenSet.intersect(p).toArray();if(0===h.length&&c.presence===M.Query.presence.REQUIRED){for(var m=0;m<c.fields.length;m++)o[j=c.fields[m]]=M.Set.empty;break}for(var y=0;y<h.length;y++){var v=h[y],g=this.invertedIndex[v],b=g._index;for(m=0;m<c.fields.length;m++){var w=g[j=c.fields[m]],x=Object.keys(w),S=v+"/"+j,k=new M.Set(x);if(c.presence==M.Query.presence.REQUIRED&&(u=u.union(k),void 0===o[j]&&(o[j]=M.Set.complete)),c.presence!=M.Query.presence.PROHIBITED){if(n[j].upsert(b,c.boost,(function(e,t){return e+t})),!i[S]){for(var E=0;E<x.length;E++){var T,C=x[E],L=new M.FieldRef(C,j),A=w[C];void 0===(T=r[L])?r[L]=new M.MatchData(v,j,A):T.add(v,j,A)}i[S]=!0}}else void 0===s[j]&&(s[j]=M.Set.empty),s[j]=s[j].union(k)}}}if(c.presence===M.Query.presence.REQUIRED)for(m=0;m<c.fields.length;m++)o[j=c.fields[m]]=o[j].intersect(u)}var _=M.Set.complete,O=M.Set.empty;for(a=0;a<this.fields.length;a++){var j;o[j=this.fields[a]]&&(_=_.intersect(o[j])),s[j]&&(O=O.union(s[j]))}var N=Object.keys(r),P=[],I=Object.create(null);if(t.isNegated())for(N=Object.keys(this.fieldVectors),a=0;a<N.length;a++){L=N[a];var F=M.FieldRef.fromString(L);r[L]=new M.MatchData}for(a=0;a<N.length;a++){var R=(F=M.FieldRef.fromString(N[a])).docRef;if(_.contains(R)&&!O.contains(R)){var D,Q=this.fieldVectors[F],q=n[F.fieldName].similarity(Q);if(void 0!==(D=I[R]))D.score+=q,D.matchData.combine(r[F]);else{var z={ref:R,score:q,matchData:r[F]};I[R]=z,P.push(z)}}}return P.sort((function(e,t){return t.score-e.score}))},M.Index.prototype.toJSON=function(){var e=Object.keys(this.invertedIndex).sort().map((function(e){return[e,this.invertedIndex[e]]}),this),t=Object.keys(this.fieldVectors).map((function(e){return[e,this.fieldVectors[e].toJSON()]}),this);return{version:M.version,fields:this.fields,fieldVectors:t,invertedIndex:e,pipeline:this.pipeline.toJSON()}},M.Index.load=function(e){var t={},r={},n=e.fieldVectors,i=Object.create(null),o=e.invertedIndex,s=new M.TokenSet.Builder,a=M.Pipeline.load(e.pipeline);e.version!=M.version&&M.utils.warn("Version mismatch when loading serialised index. Current version of lunr '"+M.version+"' does not match serialized index '"+e.version+"'");for(var l=0;l<n.length;l++){var c=(d=n[l])[0],u=d[1];r[c]=new M.Vector(u)}for(l=0;l<o.length;l++){var d,f=(d=o[l])[0],p=d[1];s.insert(f),i[f]=p}return s.finish(),t.fields=e.fields,t.fieldVectors=r,t.invertedIndex=i,t.tokenSet=s.root,t.pipeline=a,new M.Index(t)},M.Builder=function(){this._ref="id",this._fields=Object.create(null),this._documents=Object.create(null),this.invertedIndex=Object.create(null),this.fieldTermFrequencies={},this.fieldLengths={},this.tokenizer=M.tokenizer,this.pipeline=new M.Pipeline,this.searchPipeline=new M.Pipeline,this.documentCount=0,this._b=.75,this._k1=1.2,this.termIndex=0,this.metadataWhitelist=[]},M.Builder.prototype.ref=function(e){this._ref=e},M.Builder.prototype.field=function(e,t){if(/\//.test(e))throw new RangeError("Field '"+e+"' contains illegal character '/'");this._fields[e]=t||{}},M.Builder.prototype.b=function(e){this._b=e<0?0:e>1?1:e},M.Builder.prototype.k1=function(e){this._k1=e},M.Builder.prototype.add=function(e,t){var r=e[this._ref],n=Object.keys(this._fields);this._documents[r]=t||{},this.documentCount+=1;for(var i=0;i<n.length;i++){var o=n[i],s=this._fields[o].extractor,a=s?s(e):e[o],l=this.tokenizer(a,{fields:[o]}),c=this.pipeline.run(l),u=new M.FieldRef(r,o),d=Object.create(null);this.fieldTermFrequencies[u]=d,this.fieldLengths[u]=0,this.fieldLengths[u]+=c.length;for(var f=0;f<c.length;f++){var p=c[f];if(null==d[p]&&(d[p]=0),d[p]+=1,null==this.invertedIndex[p]){var h=Object.create(null);h._index=this.termIndex,this.termIndex+=1;for(var m=0;m<n.length;m++)h[n[m]]=Object.create(null);this.invertedIndex[p]=h}null==this.invertedIndex[p][o][r]&&(this.invertedIndex[p][o][r]=Object.create(null));for(var y=0;y<this.metadataWhitelist.length;y++){var v=this.metadataWhitelist[y],g=p.metadata[v];null==this.invertedIndex[p][o][r][v]&&(this.invertedIndex[p][o][r][v]=[]),this.invertedIndex[p][o][r][v].push(g)}}}},M.Builder.prototype.calculateAverageFieldLengths=function(){for(var e=Object.keys(this.fieldLengths),t=e.length,r={},n={},i=0;i<t;i++){var o=M.FieldRef.fromString(e[i]),s=o.fieldName;n[s]||(n[s]=0),n[s]+=1,r[s]||(r[s]=0),r[s]+=this.fieldLengths[o]}var a=Object.keys(this._fields);for(i=0;i<a.length;i++){var l=a[i];r[l]=r[l]/n[l]}this.averageFieldLength=r},M.Builder.prototype.createFieldVectors=function(){for(var e={},t=Object.keys(this.fieldTermFrequencies),r=t.length,n=Object.create(null),i=0;i<r;i++){for(var o=M.FieldRef.fromString(t[i]),s=o.fieldName,a=this.fieldLengths[o],l=new M.Vector,c=this.fieldTermFrequencies[o],u=Object.keys(c),d=u.length,f=this._fields[s].boost||1,p=this._documents[o.docRef].boost||1,h=0;h<d;h++){var m,y,v,g=u[h],b=c[g],w=this.invertedIndex[g]._index;void 0===n[g]?(m=M.idf(this.invertedIndex[g],this.documentCount),n[g]=m):m=n[g],y=m*((this._k1+1)*b)/(this._k1*(1-this._b+this._b*(a/this.averageFieldLength[s]))+b),y*=f,y*=p,v=Math.round(1e3*y)/1e3,l.insert(w,v)}e[o]=l}this.fieldVectors=e},M.Builder.prototype.createTokenSet=function(){this.tokenSet=M.TokenSet.fromArray(Object.keys(this.invertedIndex).sort())},M.Builder.prototype.build=function(){return this.calculateAverageFieldLengths(),this.createFieldVectors(),this.createTokenSet(),new M.Index({invertedIndex:this.invertedIndex,fieldVectors:this.fieldVectors,tokenSet:this.tokenSet,fields:Object.keys(this._fields),pipeline:this.searchPipeline})},M.Builder.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},M.MatchData=function(e,t,r){for(var n=Object.create(null),i=Object.keys(r||{}),o=0;o<i.length;o++){var s=i[o];n[s]=r[s].slice()}this.metadata=Object.create(null),void 0!==e&&(this.metadata[e]=Object.create(null),this.metadata[e][t]=n)},M.MatchData.prototype.combine=function(e){for(var t=Object.keys(e.metadata),r=0;r<t.length;r++){var n=t[r],i=Object.keys(e.metadata[n]);null==this.metadata[n]&&(this.metadata[n]=Object.create(null));for(var o=0;o<i.length;o++){var s=i[o],a=Object.keys(e.metadata[n][s]);null==this.metadata[n][s]&&(this.metadata[n][s]=Object.create(null));for(var l=0;l<a.length;l++){var c=a[l];null==this.metadata[n][s][c]?this.metadata[n][s][c]=e.metadata[n][s][c]:this.metadata[n][s][c]=this.metadata[n][s][c].concat(e.metadata[n][s][c])}}}},M.MatchData.prototype.add=function(e,t,r){if(!(e in this.metadata))return this.metadata[e]=Object.create(null),void(this.metadata[e][t]=r);if(t in this.metadata[e])for(var n=Object.keys(r),i=0;i<n.length;i++){var o=n[i];o in this.metadata[e][t]?this.metadata[e][t][o]=this.metadata[e][t][o].concat(r[o]):this.metadata[e][t][o]=r[o]}else this.metadata[e][t]=r},M.Query=function(e){this.clauses=[],this.allFields=e},M.Query.wildcard=new String("*"),M.Query.wildcard.NONE=0,M.Query.wildcard.LEADING=1,M.Query.wildcard.TRAILING=2,M.Query.presence={OPTIONAL:1,REQUIRED:2,PROHIBITED:3},M.Query.prototype.clause=function(e){return"fields"in e||(e.fields=this.allFields),"boost"in e||(e.boost=1),"usePipeline"in e||(e.usePipeline=!0),"wildcard"in e||(e.wildcard=M.Query.wildcard.NONE),e.wildcard&M.Query.wildcard.LEADING&&e.term.charAt(0)!=M.Query.wildcard&&(e.term="*"+e.term),e.wildcard&M.Query.wildcard.TRAILING&&e.term.slice(-1)!=M.Query.wildcard&&(e.term=e.term+"*"),"presence"in e||(e.presence=M.Query.presence.OPTIONAL),this.clauses.push(e),this},M.Query.prototype.isNegated=function(){for(var e=0;e<this.clauses.length;e++)if(this.clauses[e].presence!=M.Query.presence.PROHIBITED)return!1;return!0},M.Query.prototype.term=function(e,t){if(Array.isArray(e))return e.forEach((function(e){this.term(e,M.utils.clone(t))}),this),this;var r=t||{};return r.term=e.toString(),this.clause(r),this},M.QueryParseError=function(e,t,r){this.name="QueryParseError",this.message=e,this.start=t,this.end=r},M.QueryParseError.prototype=new Error,M.QueryLexer=function(e){this.lexemes=[],this.str=e,this.length=e.length,this.pos=0,this.start=0,this.escapeCharPositions=[]},M.QueryLexer.prototype.run=function(){for(var e=M.QueryLexer.lexText;e;)e=e(this)},M.QueryLexer.prototype.sliceString=function(){for(var e=[],t=this.start,r=this.pos,n=0;n<this.escapeCharPositions.length;n++)r=this.escapeCharPositions[n],e.push(this.str.slice(t,r)),t=r+1;return e.push(this.str.slice(t,this.pos)),this.escapeCharPositions.length=0,e.join("")},M.QueryLexer.prototype.emit=function(e){this.lexemes.push({type:e,str:this.sliceString(),start:this.start,end:this.pos}),this.start=this.pos},M.QueryLexer.prototype.escapeCharacter=function(){this.escapeCharPositions.push(this.pos-1),this.pos+=1},M.QueryLexer.prototype.next=function(){if(this.pos>=this.length)return M.QueryLexer.EOS;var e=this.str.charAt(this.pos);return this.pos+=1,e},M.QueryLexer.prototype.width=function(){return this.pos-this.start},M.QueryLexer.prototype.ignore=function(){this.start==this.pos&&(this.pos+=1),this.start=this.pos},M.QueryLexer.prototype.backup=function(){this.pos-=1},M.QueryLexer.prototype.acceptDigitRun=function(){var e,t;do{t=(e=this.next()).charCodeAt(0)}while(t>47&&t<58);e!=M.QueryLexer.EOS&&this.backup()},M.QueryLexer.prototype.more=function(){return this.pos<this.length},M.QueryLexer.EOS="EOS",M.QueryLexer.FIELD="FIELD",M.QueryLexer.TERM="TERM",M.QueryLexer.EDIT_DISTANCE="EDIT_DISTANCE",M.QueryLexer.BOOST="BOOST",M.QueryLexer.PRESENCE="PRESENCE",M.QueryLexer.lexField=function(e){return e.backup(),e.emit(M.QueryLexer.FIELD),e.ignore(),M.QueryLexer.lexText},M.QueryLexer.lexTerm=function(e){if(e.width()>1&&(e.backup(),e.emit(M.QueryLexer.TERM)),e.ignore(),e.more())return M.QueryLexer.lexText},M.QueryLexer.lexEditDistance=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(M.QueryLexer.EDIT_DISTANCE),M.QueryLexer.lexText},M.QueryLexer.lexBoost=function(e){return e.ignore(),e.acceptDigitRun(),e.emit(M.QueryLexer.BOOST),M.QueryLexer.lexText},M.QueryLexer.lexEOS=function(e){e.width()>0&&e.emit(M.QueryLexer.TERM)},M.QueryLexer.termSeparator=M.tokenizer.separator,M.QueryLexer.lexText=function(e){for(;;){var t=e.next();if(t==M.QueryLexer.EOS)return M.QueryLexer.lexEOS;if(92!=t.charCodeAt(0)){if(":"==t)return M.QueryLexer.lexField;if("~"==t)return e.backup(),e.width()>0&&e.emit(M.QueryLexer.TERM),M.QueryLexer.lexEditDistance;if("^"==t)return e.backup(),e.width()>0&&e.emit(M.QueryLexer.TERM),M.QueryLexer.lexBoost;if("+"==t&&1===e.width())return e.emit(M.QueryLexer.PRESENCE),M.QueryLexer.lexText;if("-"==t&&1===e.width())return e.emit(M.QueryLexer.PRESENCE),M.QueryLexer.lexText;if(t.match(M.QueryLexer.termSeparator))return M.QueryLexer.lexTerm}else e.escapeCharacter()}},M.QueryParser=function(e,t){this.lexer=new M.QueryLexer(e),this.query=t,this.currentClause={},this.lexemeIdx=0},M.QueryParser.prototype.parse=function(){this.lexer.run(),this.lexemes=this.lexer.lexemes;for(var e=M.QueryParser.parseClause;e;)e=e(this);return this.query},M.QueryParser.prototype.peekLexeme=function(){return this.lexemes[this.lexemeIdx]},M.QueryParser.prototype.consumeLexeme=function(){var e=this.peekLexeme();return this.lexemeIdx+=1,e},M.QueryParser.prototype.nextClause=function(){var e=this.currentClause;this.query.clause(e),this.currentClause={}},M.QueryParser.parseClause=function(e){var t=e.peekLexeme();if(null!=t)switch(t.type){case M.QueryLexer.PRESENCE:return M.QueryParser.parsePresence;case M.QueryLexer.FIELD:return M.QueryParser.parseField;case M.QueryLexer.TERM:return M.QueryParser.parseTerm;default:var r="expected either a field or a term, found "+t.type;throw t.str.length>=1&&(r+=" with value '"+t.str+"'"),new M.QueryParseError(r,t.start,t.end)}},M.QueryParser.parsePresence=function(e){var t=e.consumeLexeme();if(null!=t){switch(t.str){case"-":e.currentClause.presence=M.Query.presence.PROHIBITED;break;case"+":e.currentClause.presence=M.Query.presence.REQUIRED;break;default:var r="unrecognised presence operator'"+t.str+"'";throw new M.QueryParseError(r,t.start,t.end)}var n=e.peekLexeme();if(null==n)throw r="expecting term or field, found nothing",new M.QueryParseError(r,t.start,t.end);switch(n.type){case M.QueryLexer.FIELD:return M.QueryParser.parseField;case M.QueryLexer.TERM:return M.QueryParser.parseTerm;default:throw r="expecting term or field, found '"+n.type+"'",new M.QueryParseError(r,n.start,n.end)}}},M.QueryParser.parseField=function(e){var t=e.consumeLexeme();if(null!=t){if(-1==e.query.allFields.indexOf(t.str)){var r=e.query.allFields.map((function(e){return"'"+e+"'"})).join(", "),n="unrecognised field '"+t.str+"', possible fields: "+r;throw new M.QueryParseError(n,t.start,t.end)}e.currentClause.fields=[t.str];var i=e.peekLexeme();if(null==i)throw n="expecting term, found nothing",new M.QueryParseError(n,t.start,t.end);switch(i.type){case M.QueryLexer.TERM:return M.QueryParser.parseTerm;default:throw n="expecting term, found '"+i.type+"'",new M.QueryParseError(n,i.start,i.end)}}},M.QueryParser.parseTerm=function(e){var t=e.consumeLexeme();if(null!=t){e.currentClause.term=t.str.toLowerCase(),-1!=t.str.indexOf("*")&&(e.currentClause.usePipeline=!1);var r=e.peekLexeme();if(null!=r)switch(r.type){case M.QueryLexer.TERM:return e.nextClause(),M.QueryParser.parseTerm;case M.QueryLexer.FIELD:return e.nextClause(),M.QueryParser.parseField;case M.QueryLexer.EDIT_DISTANCE:return M.QueryParser.parseEditDistance;case M.QueryLexer.BOOST:return M.QueryParser.parseBoost;case M.QueryLexer.PRESENCE:return e.nextClause(),M.QueryParser.parsePresence;default:var n="Unexpected lexeme type '"+r.type+"'";throw new M.QueryParseError(n,r.start,r.end)}else e.nextClause()}},M.QueryParser.parseEditDistance=function(e){var t=e.consumeLexeme();if(null!=t){var r=parseInt(t.str,10);if(isNaN(r)){var n="edit distance must be numeric";throw new M.QueryParseError(n,t.start,t.end)}e.currentClause.editDistance=r;var i=e.peekLexeme();if(null!=i)switch(i.type){case M.QueryLexer.TERM:return e.nextClause(),M.QueryParser.parseTerm;case M.QueryLexer.FIELD:return e.nextClause(),M.QueryParser.parseField;case M.QueryLexer.EDIT_DISTANCE:return M.QueryParser.parseEditDistance;case M.QueryLexer.BOOST:return M.QueryParser.parseBoost;case M.QueryLexer.PRESENCE:return e.nextClause(),M.QueryParser.parsePresence;default:throw n="Unexpected lexeme type '"+i.type+"'",new M.QueryParseError(n,i.start,i.end)}else e.nextClause()}},M.QueryParser.parseBoost=function(e){var t=e.consumeLexeme();if(null!=t){var r=parseInt(t.str,10);if(isNaN(r)){var n="boost must be numeric";throw new M.QueryParseError(n,t.start,t.end)}e.currentClause.boost=r;var i=e.peekLexeme();if(null!=i)switch(i.type){case M.QueryLexer.TERM:return e.nextClause(),M.QueryParser.parseTerm;case M.QueryLexer.FIELD:return e.nextClause(),M.QueryParser.parseField;case M.QueryLexer.EDIT_DISTANCE:return M.QueryParser.parseEditDistance;case M.QueryLexer.BOOST:return M.QueryParser.parseBoost;case M.QueryLexer.PRESENCE:return e.nextClause(),M.QueryParser.parsePresence;default:throw n="Unexpected lexeme type '"+i.type+"'",new M.QueryParseError(n,i.start,i.end)}else e.nextClause()}},void 0===(i="function"==typeof(n=function(){return M})?n.call(t,r,t,e):n)||(e.exports=i)}()},9813:(e,t,r)=>{var n=r(3606);e.exports={getPlatformFromFilename:function(e){var t=e.toLowerCase().split(/[-._/]/),r=t[t.length-1];return"exe"===r||"zip"===r&&t.includes("win32")||"zip"===r&&t.includes("windows")||"zip"===r&&t.includes("win")||"zip"===r&&t.includes("ia32")?"win32":"dmg"===r||"pkg"===r||"zip"===r&&t.includes("osx")||"zip"===r&&t.includes("mac")||"zip"===r&&t.includes("macos")||"zip"===r&&t.includes("mas")||"zip"===r&&t.includes("darwin")?"darwin":"rpm"===r||"deb"===r||"appimage"===r||"zip"===r&&t.includes("linux")?"linux":null},getPlatformFromUserAgent:function(e){var t=e?n(e).os.name:n().os.name;return/mac/i.test(t)?"darwin":/windows/i.test(t)?"win32":/ubuntu|linux|gentoo|centos|redhat|suse|unix|fedora/i.test(t)?"linux":/freebsd/i.test(t)?"freebsd":/openbsd/i.test(t)?"openbsd":null},getPlatformLabel:function(e){return"darwin"===e?"macOS":"win32"===e?"Windows":"linux"===e?"Linux":e}}},3606:function(e,t,r){var n;!function(i,o){"use strict";var s="function",a="undefined",l="object",c="string",u="model",d="name",f="type",p="vendor",h="version",m="architecture",y="console",v="mobile",g="tablet",b="smarttv",w="wearable",x="embedded",S={extend:function(e,t){var r={};for(var n in e)t[n]&&t[n].length%2==0?r[n]=t[n].concat(e[n]):r[n]=e[n];return r},has:function(e,t){return typeof e===c&&-1!==t.toLowerCase().indexOf(e.toLowerCase())},lowerize:function(e){return e.toLowerCase()},major:function(e){return typeof e===c?e.replace(/[^\d\.]/g,"").split(".")[0]:o},trim:function(e,t){return e=e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),typeof t===a?e:e.substring(0,255)}},k={rgx:function(e,t){for(var r,n,i,a,c,u,d=0;d<t.length&&!c;){var f=t[d],p=t[d+1];for(r=n=0;r<f.length&&!c;)if(c=f[r++].exec(e))for(i=0;i<p.length;i++)u=c[++n],typeof(a=p[i])===l&&a.length>0?2==a.length?typeof a[1]==s?this[a[0]]=a[1].call(this,u):this[a[0]]=a[1]:3==a.length?typeof a[1]!==s||a[1].exec&&a[1].test?this[a[0]]=u?u.replace(a[1],a[2]):o:this[a[0]]=u?a[1].call(this,u,a[2]):o:4==a.length&&(this[a[0]]=u?a[3].call(this,u.replace(a[1],a[2])):o):this[a]=u||o;d+=2}},str:function(e,t){for(var r in t)if(typeof t[r]===l&&t[r].length>0){for(var n=0;n<t[r].length;n++)if(S.has(t[r][n],e))return"?"===r?o:r}else if(S.has(t[r],e))return"?"===r?o:r;return e}},E={browser:{oldSafari:{version:{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}},oldEdge:{version:{.1:"12.",21:"13.",31:"14.",39:"15.",41:"16.",42:"17.",44:"18."}}},os:{windows:{version:{ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"}}}},T={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[h,[d,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[h,[d,"Edge"]],[/(opera\smini)\/([\w\.-]+)/i,/(opera\s[mobiletab]{3,6})\b.+version\/([\w\.-]+)/i,/(opera)(?:.+version\/|[\/\s]+)([\w\.]+)/i],[d,h],[/opios[\/\s]+([\w\.]+)/i],[h,[d,"Opera Mini"]],[/\sopr\/([\w\.]+)/i],[h,[d,"Opera"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,/(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i,/(ba?idubrowser)[\/\s]?([\w\.]+)/i,/(?:ms|\()(ie)\s([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i,/(rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([\w\.]+)/i,/(weibo)__([\d\.]+)/i],[d,h],[/(?:[\s\/]uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i],[h,[d,"UCBrowser"]],[/(?:windowswechat)?\sqbcore\/([\w\.]+)\b.*(?:windowswechat)?/i],[h,[d,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[h,[d,"WeChat"]],[/konqueror\/([\w\.]+)/i],[h,[d,"Konqueror"]],[/trident.+rv[:\s]([\w\.]{1,9})\b.+like\sgecko/i],[h,[d,"IE"]],[/yabrowser\/([\w\.]+)/i],[h,[d,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[d,/(.+)/,"$1 Secure Browser"],h],[/focus\/([\w\.]+)/i],[h,[d,"Firefox Focus"]],[/opt\/([\w\.]+)/i],[h,[d,"Opera Touch"]],[/coc_coc_browser\/([\w\.]+)/i],[h,[d,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[h,[d,"Dolphin"]],[/coast\/([\w\.]+)/i],[h,[d,"Opera Coast"]],[/xiaomi\/miuibrowser\/([\w\.]+)/i],[h,[d,"MIUI Browser"]],[/fxios\/([\w\.-]+)/i],[h,[d,"Firefox"]],[/(qihu|qhbrowser|qihoobrowser|360browser)/i],[[d,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[d,/(.+)/,"$1 Browser"],h],[/(comodo_dragon)\/([\w\.]+)/i],[[d,/_/g," "],h],[/\s(electron)\/([\w\.]+)\ssafari/i,/(tesla)(?:\sqtcarbrowser|\/(20[12]\d\.[\w\.-]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/\s]?([\w\.]+)/i],[d,h],[/(MetaSr)[\/\s]?([\w\.]+)/i,/(LBBROWSER)/i],[d],[/;fbav\/([\w\.]+);/i],[h,[d,"Facebook"]],[/FBAN\/FBIOS|FB_IAB\/FB4A/i],[[d,"Facebook"]],[/safari\s(line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/\s]([\w\.-]+)/i],[d,h],[/\bgsa\/([\w\.]+)\s.*safari\//i],[h,[d,"GSA"]],[/headlesschrome(?:\/([\w\.]+)|\s)/i],[h,[d,"Chrome Headless"]],[/\swv\).+(chrome)\/([\w\.]+)/i],[[d,"Chrome WebView"],h],[/droid.+\sversion\/([\w\.]+)\b.+(?:mobile\ssafari|safari)/i],[h,[d,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i],[d,h],[/version\/([\w\.]+)\s.*mobile\/\w+\s(safari)/i],[h,[d,"Mobile Safari"]],[/version\/([\w\.]+)\s.*(mobile\s?safari|safari)/i],[h,d],[/webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i],[d,[h,k.str,E.browser.oldSafari.version]],[/(webkit|khtml)\/([\w\.]+)/i],[d,h],[/(navigator|netscape)\/([\w\.-]+)/i],[[d,"Netscape"],h],[/ile\svr;\srv:([\w\.]+)\).+firefox/i],[h,[d,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,/(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,/(firefox)\/([\w\.]+)\s[\w\s\-]+\/[\w\.]+$/i,/(mozilla)\/([\w\.]+)\s.+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,/(links)\s\(([\w\.]+)/i,/(gobrowser)\/?([\w\.]*)/i,/(ice\s?browser)\/v?([\w\._]+)/i,/(mosaic)[\/\s]([\w\.]+)/i],[d,h]],cpu:[[/(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i],[[m,"amd64"]],[/(ia32(?=;))/i],[[m,S.lowerize]],[/((?:i[346]|x)86)[;\)]/i],[[m,"ia32"]],[/\b(aarch64|armv?8e?l?)\b/i],[[m,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[m,"armhf"]],[/windows\s(ce|mobile);\sppc;/i],[[m,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i],[[m,/ower/,"",S.lowerize]],[/(sun4\w)[;\)]/i],[[m,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?:64|(?=v(?:[1-7]|[5-7]1)l?|;|eabi))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[m,S.lowerize]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus\s10)/i],[u,[p,"Samsung"],[f,g]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy\snexus)/i,/\ssamsung[\s-]([\w-]+)/i,/sec-(sgh\w+)/i],[u,[p,"Samsung"],[f,v]],[/\((ip(?:hone|od)[\s\w]*);/i],[u,[p,"Apple"],[f,v]],[/\((ipad);[\w\s\),;-]+apple/i,/applecoremedia\/[\w\.]+\s\((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[u,[p,"Apple"],[f,g]],[/\b((?:agr|ags[23]|bah2?|sht?)-a?[lw]\d{2})/i],[u,[p,"Huawei"],[f,g]],[/d\/huawei([\w\s-]+)[;\)]/i,/\b(nexus\s6p|vog-[at]?l\d\d|ane-[at]?l[x\d]\d|eml-a?l\d\da?|lya-[at]?l\d[\dc]|clt-a?l\d\di?|ele-l\d\d)/i,/\b(\w{2,4}-[atu][ln][01259][019])[;\)\s]/i],[u,[p,"Huawei"],[f,v]],[/\b(poco[\s\w]+)(?:\sbuild|\))/i,/\b;\s(\w+)\sbuild\/hm\1/i,/\b(hm[\s\-_]?note?[\s_]?(?:\d\w)?)\sbuild/i,/\b(redmi[\s\-_]?(?:note|k)?[\w\s_]+)(?:\sbuild|\))/i,/\b(mi[\s\-_]?(?:a\d|one|one[\s_]plus|note lte)?[\s_]?(?:\d?\w?)[\s_]?(?:plus)?)\sbuild/i],[[u,/_/g," "],[p,"Xiaomi"],[f,v]],[/\b(mi[\s\-_]?(?:pad)(?:[\w\s_]+))(?:\sbuild|\))/i],[[u,/_/g," "],[p,"Xiaomi"],[f,g]],[/;\s(\w+)\sbuild.+\soppo/i,/\s(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007)\b/i],[u,[p,"OPPO"],[f,v]],[/\svivo\s(\w+)(?:\sbuild|\))/i,/\s(v[12]\d{3}\w?[at])(?:\sbuild|;)/i],[u,[p,"Vivo"],[f,v]],[/\s(rmx[12]\d{3})(?:\sbuild|;)/i],[u,[p,"Realme"],[f,v]],[/\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)\b[\w\s]+build\//i,/\smot(?:orola)?[\s-](\w*)/i,/((?:moto[\s\w\(\)]+|xt\d{3,4}|nexus\s6)(?=\sbuild|\)))/i],[u,[p,"Motorola"],[f,v]],[/\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],[u,[p,"Motorola"],[f,g]],[/((?=lg)?[vl]k\-?\d{3})\sbuild|\s3\.[\s\w;-]{10}lg?-([06cv9]{3,4})/i],[u,[p,"LG"],[f,g]],[/(lm-?f100[nv]?|nexus\s[45])/i,/lg[e;\s\/-]+((?!browser|netcast)\w+)/i,/\blg(\-?[\d\w]+)\sbuild/i],[u,[p,"LG"],[f,v]],[/(ideatab[\w\-\s]+)/i,/lenovo\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+)|yt[\d\w-]{6}|tb[\d\w-]{6})/i],[u,[p,"Lenovo"],[f,g]],[/(?:maemo|nokia).*(n900|lumia\s\d+)/i,/nokia[\s_-]?([\w\.-]*)/i],[[u,/_/g," "],[p,"Nokia"],[f,v]],[/droid.+;\s(pixel\sc)[\s)]/i],[u,[p,"Google"],[f,g]],[/droid.+;\s(pixel[\s\daxl]{0,6})(?:\sbuild|\))/i],[u,[p,"Google"],[f,v]],[/droid.+\s([c-g]\d{4}|so[-l]\w+|xq-a\w[4-7][12])(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[u,[p,"Sony"],[f,v]],[/sony\stablet\s[ps]\sbuild\//i,/(?:sony)?sgp\w+(?:\sbuild\/|\))/i],[[u,"Xperia Tablet"],[p,"Sony"],[f,g]],[/\s(kb2005|in20[12]5|be20[12][59])\b/i,/\ba000(1)\sbuild/i,/\boneplus\s(a\d{4})[\s)]/i],[u,[p,"OnePlus"],[f,v]],[/(alexa)webm/i,/(kf[a-z]{2}wi)(\sbuild\/|\))/i,/(kf[a-z]+)(\sbuild\/|\)).+silk\//i],[u,[p,"Amazon"],[f,g]],[/(sd|kf)[0349hijorstuw]+(\sbuild\/|\)).+silk\//i],[[u,"Fire Phone"],[p,"Amazon"],[f,v]],[/\((playbook);[\w\s\),;-]+(rim)/i],[u,p,[f,g]],[/((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10;\s(\w+)/i],[u,[p,"BlackBerry"],[f,v]],[/(?:\b|asus_)(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus\s7|padfone|p00[cj])/i],[u,[p,"ASUS"],[f,g]],[/\s(z[es]6[027][01][km][ls]|zenfone\s\d\w?)\b/i],[u,[p,"ASUS"],[f,v]],[/(nexus\s9)/i],[u,[p,"HTC"],[f,g]],[/(htc)[;_\s-]{1,2}([\w\s]+(?=\)|\sbuild)|\w+)/i,/(zte)-(\w*)/i,/(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i],[p,[u,/_/g," "],[f,v]],[/droid[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i],[u,[p,"Acer"],[f,g]],[/droid.+;\s(m[1-5]\snote)\sbuild/i,/\bmz-([\w-]{2,})/i],[u,[p,"Meizu"],[f,v]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,/(hp)\s([\w\s]+\w)/i,/(asus)-?(\w+)/i,/(microsoft);\s(lumia[\s\w]+)/i,/(lenovo)[_\s-]?([\w-]+)/i,/linux;.+(jolla);/i,/droid.+;\s(oppo)\s?([\w\s]+)\sbuild/i],[p,u,[f,v]],[/(archos)\s(gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/\s(nook)[\w\s]+build\/(\w+)/i,/(dell)\s(strea[kpr\s\d]*[\dko])/i,/[;\/]\s?(le[\s\-]+pan)[\s\-]+(\w{1,9})\sbuild/i,/[;\/]\s?(trinity)[\-\s]*(t\d{3})\sbuild/i,/\b(gigaset)[\s\-]+(q\w{1,9})\sbuild/i,/\b(vodafone)\s([\w\s]+)(?:\)|\sbuild)/i],[p,u,[f,g]],[/\s(surface\sduo)\s/i],[u,[p,"Microsoft"],[f,g]],[/droid\s[\d\.]+;\s(fp\du?)\sbuild/i],[u,[p,"Fairphone"],[f,v]],[/\s(u304aa)\sbuild/i],[u,[p,"AT&T"],[f,v]],[/sie-(\w*)/i],[u,[p,"Siemens"],[f,v]],[/[;\/]\s?(rct\w+)\sbuild/i],[u,[p,"RCA"],[f,g]],[/[;\/\s](venue[\d\s]{2,7})\sbuild/i],[u,[p,"Dell"],[f,g]],[/[;\/]\s?(q(?:mv|ta)\w+)\sbuild/i],[u,[p,"Verizon"],[f,g]],[/[;\/]\s(?:barnes[&\s]+noble\s|bn[rt])([\w\s\+]*)\sbuild/i],[u,[p,"Barnes & Noble"],[f,g]],[/[;\/]\s(tm\d{3}\w+)\sbuild/i],[u,[p,"NuVision"],[f,g]],[/;\s(k88)\sbuild/i],[u,[p,"ZTE"],[f,g]],[/;\s(nx\d{3}j)\sbuild/i],[u,[p,"ZTE"],[f,v]],[/[;\/]\s?(gen\d{3})\sbuild.*49h/i],[u,[p,"Swiss"],[f,v]],[/[;\/]\s?(zur\d{3})\sbuild/i],[u,[p,"Swiss"],[f,g]],[/[;\/]\s?((zeki)?tb.*\b)\sbuild/i],[u,[p,"Zeki"],[f,g]],[/[;\/]\s([yr]\d{2})\sbuild/i,/[;\/]\s(dragon[\-\s]+touch\s|dt)(\w{5})\sbuild/i],[[p,"Dragon Touch"],u,[f,g]],[/[;\/]\s?(ns-?\w{0,9})\sbuild/i],[u,[p,"Insignia"],[f,g]],[/[;\/]\s?((nxa|Next)-?\w{0,9})\sbuild/i],[u,[p,"NextBook"],[f,g]],[/[;\/]\s?(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05]))\sbuild/i],[[p,"Voice"],u,[f,v]],[/[;\/]\s?(lvtel\-)?(v1[12])\sbuild/i],[[p,"LvTel"],u,[f,v]],[/;\s(ph-1)\s/i],[u,[p,"Essential"],[f,v]],[/[;\/]\s?(v(100md|700na|7011|917g).*\b)\sbuild/i],[u,[p,"Envizen"],[f,g]],[/[;\/]\s?(trio[\s\w\-\.]+)\sbuild/i],[u,[p,"MachSpeed"],[f,g]],[/[;\/]\s?tu_(1491)\sbuild/i],[u,[p,"Rotor"],[f,g]],[/(shield[\w\s]+)\sbuild/i],[u,[p,"Nvidia"],[f,g]],[/(sprint)\s(\w+)/i],[p,u,[f,v]],[/(kin\.[onetw]{3})/i],[[u,/\./g," "],[p,"Microsoft"],[f,v]],[/droid\s[\d\.]+;\s(cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[u,[p,"Zebra"],[f,g]],[/droid\s[\d\.]+;\s(ec30|ps20|tc[2-8]\d[kx])\)/i],[u,[p,"Zebra"],[f,v]],[/\s(ouya)\s/i,/(nintendo)\s([wids3utch]+)/i],[p,u,[f,y]],[/droid.+;\s(shield)\sbuild/i],[u,[p,"Nvidia"],[f,y]],[/(playstation\s[345portablevi]+)/i],[u,[p,"Sony"],[f,y]],[/[\s\(;](xbox(?:\sone)?(?!;\sxbox))[\s\);]/i],[u,[p,"Microsoft"],[f,y]],[/smart-tv.+(samsung)/i],[p,[f,b]],[/hbbtv.+maple;(\d+)/i],[[u,/^/,"SmartTV"],[p,"Samsung"],[f,b]],[/(?:linux;\snetcast.+smarttv|lg\snetcast\.tv-201\d)/i],[[p,"LG"],[f,b]],[/(apple)\s?tv/i],[p,[u,"Apple TV"],[f,b]],[/crkey/i],[[u,"Chromecast"],[p,"Google"],[f,b]],[/droid.+aft([\w])(\sbuild\/|\))/i],[u,[p,"Amazon"],[f,b]],[/\(dtv[\);].+(aquos)/i],[u,[p,"Sharp"],[f,b]],[/hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i],[[p,S.trim],[u,S.trim],[f,b]],[/[\s\/\(](android\s|smart[-\s]?|opera\s)tv[;\)\s]/i],[[f,b]],[/((pebble))app\/[\d\.]+\s/i],[p,u,[f,w]],[/droid.+;\s(glass)\s\d/i],[u,[p,"Google"],[f,w]],[/droid\s[\d\.]+;\s(wt63?0{2,3})\)/i],[u,[p,"Zebra"],[f,w]],[/(tesla)(?:\sqtcarbrowser|\/20[12]\d\.[\w\.-]+)/i],[p,[f,x]],[/droid .+?; ([^;]+?)(?: build|\) applewebkit).+? mobile safari/i],[u,[f,v]],[/droid .+?;\s([^;]+?)(?: build|\) applewebkit).+?(?! mobile) safari/i],[u,[f,g]],[/\s(tablet|tab)[;\/]/i,/\s(mobile)(?:[;\/]|\ssafari)/i],[[f,S.lowerize]],[/(android[\w\.\s\-]{0,9});.+build/i],[u,[p,"Generic"]],[/(phone)/i],[[f,v]]],engine:[[/windows.+\sedge\/([\w\.]+)/i],[h,[d,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[h,[d,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,/(icab)[\/\s]([23]\.[\d\.]+)/i],[d,h],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[h,d]],os:[[/microsoft\s(windows)\s(vista|xp)/i],[d,h],[/(windows)\snt\s6\.2;\s(arm)/i,/(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,/(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)(?!.+xbox)/i],[d,[h,k.str,E.os.windows.version]],[/(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],[[d,"Windows"],[h,k.str,E.os.windows.version]],[/ip[honead]{2,4}\b(?:.*os\s([\w]+)\slike\smac|;\sopera)/i,/cfnetwork\/.+darwin/i],[[h,/_/g,"."],[d,"iOS"]],[/(mac\sos\sx)\s?([\w\s\.]*)/i,/(macintosh|mac(?=_powerpc)\s)(?!.+haiku)/i],[[d,"Mac OS"],[h,/_/g,"."]],[/(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/\s]([\w\.]+)/i,/\((series40);/i],[d,h],[/\(bb(10);/i],[h,[d,"BlackBerry"]],[/(?:symbian\s?os|symbos|s60(?=;)|series60)[\/\s-]?([\w\.]*)/i],[h,[d,"Symbian"]],[/mozilla.+\(mobile;.+gecko.+firefox/i],[[d,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[h,[d,"webOS"]],[/crkey\/([\d\.]+)/i],[h,[d,"Chromecast"]],[/(cros)\s[\w]+\s([\w\.]+\w)/i],[[d,"Chromium OS"],h],[/(nintendo|playstation)\s([wids345portablevuch]+)/i,/(xbox);\s+xbox\s([^\);]+)/i,/(mint)[\/\s\(\)]?(\w*)/i,/(mageia|vectorlinux)[;\s]/i,/(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?=\slinux)|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus|raspbian)(?:\sgnu\/linux)?(?:\slinux)?[\/\s-]?(?!chrom|package)([\w\.-]*)/i,/(hurd|linux)\s?([\w\.]*)/i,/(gnu)\s?([\w\.]*)/i,/\s([frentopc-]{0,4}bsd|dragonfly)\s?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku)\s(\w+)/i],[d,h],[/(sunos)\s?([\w\.\d]*)/i],[[d,"Solaris"],h],[/((?:open)?solaris)[\/\s-]?([\w\.]*)/i,/(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,/(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i,/(unix)\s?([\w\.]*)/i],[d,h]]},C=function(e,t){if("object"==typeof e&&(t=e,e=o),!(this instanceof C))return new C(e,t).getResult();var r=e||(void 0!==i&&i.navigator&&i.navigator.userAgent?i.navigator.userAgent:""),n=t?S.extend(T,t):T;return this.getBrowser=function(){var e={name:o,version:o};return k.rgx.call(e,r,n.browser),e.major=S.major(e.version),e},this.getCPU=function(){var e={architecture:o};return k.rgx.call(e,r,n.cpu),e},this.getDevice=function(){var e={vendor:o,model:o,type:o};return k.rgx.call(e,r,n.device),e},this.getEngine=function(){var e={name:o,version:o};return k.rgx.call(e,r,n.engine),e},this.getOS=function(){var e={name:o,version:o};return k.rgx.call(e,r,n.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return r},this.setUA=function(e){return r=typeof e===c&&e.length>255?S.trim(e,255):e,this},this.setUA(r),this};C.VERSION="0.7.28",C.BROWSER={NAME:d,MAJOR:"major",VERSION:h},C.CPU={ARCHITECTURE:m},C.DEVICE={MODEL:u,VENDOR:p,TYPE:f,CONSOLE:y,MOBILE:v,SMARTTV:b,TABLET:g,WEARABLE:w,EMBEDDED:x},C.ENGINE={NAME:d,VERSION:h},C.OS={NAME:d,VERSION:h},typeof t!==a?(e.exports&&(t=e.exports=C),t.UAParser=C):(n=function(){return C}.call(t,r,t,e))===o||(e.exports=n);var L=void 0!==i&&(i.jQuery||i.Zepto);if(L&&!L.ua){var A=new C;L.ua=A.getResult(),L.ua.get=function(){return A.getUA()},L.ua.set=function(e){A.setUA(e);var t=A.getResult();for(var r in t)L.ua[r]=t[r]}}}("object"==typeof window?window:this)},7563:(e,t,r)=>{"use strict";const n=r(610),i=r(4020),o=r(500),s=r(2806),a=Symbol("encodeFragmentIdentifier");function l(e){if("string"!=typeof e||1!==e.length)throw new TypeError("arrayFormatSeparator must be single character string")}function c(e,t){return t.encode?t.strict?n(e):encodeURIComponent(e):e}function u(e,t){return t.decode?i(e):e}function d(e){return Array.isArray(e)?e.sort():"object"==typeof e?d(Object.keys(e)).sort(((e,t)=>Number(e)-Number(t))).map((t=>e[t])):e}function f(e){const t=e.indexOf("#");return-1!==t&&(e=e.slice(0,t)),e}function p(e){const t=(e=f(e)).indexOf("?");return-1===t?"":e.slice(t+1)}function h(e,t){return t.parseNumbers&&!Number.isNaN(Number(e))&&"string"==typeof e&&""!==e.trim()?e=Number(e):!t.parseBooleans||null===e||"true"!==e.toLowerCase()&&"false"!==e.toLowerCase()||(e="true"===e.toLowerCase()),e}function m(e,t){l((t=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},t)).arrayFormatSeparator);const r=function(e){let t;switch(e.arrayFormat){case"index":return(e,r,n)=>{t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===n[e]&&(n[e]={}),n[e][t[1]]=r):n[e]=r};case"bracket":return(e,r,n)=>{t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==n[e]?n[e]=[].concat(n[e],r):n[e]=[r]:n[e]=r};case"colon-list-separator":return(e,r,n)=>{t=/(:list)$/.exec(e),e=e.replace(/:list$/,""),t?void 0!==n[e]?n[e]=[].concat(n[e],r):n[e]=[r]:n[e]=r};case"comma":case"separator":return(t,r,n)=>{const i="string"==typeof r&&r.includes(e.arrayFormatSeparator),o="string"==typeof r&&!i&&u(r,e).includes(e.arrayFormatSeparator);r=o?u(r,e):r;const s=i||o?r.split(e.arrayFormatSeparator).map((t=>u(t,e))):null===r?r:u(r,e);n[t]=s};case"bracket-separator":return(t,r,n)=>{const i=/(\[\])$/.test(t);if(t=t.replace(/\[\]$/,""),!i)return void(n[t]=r?u(r,e):r);const o=null===r?[]:r.split(e.arrayFormatSeparator).map((t=>u(t,e)));void 0!==n[t]?n[t]=[].concat(n[t],o):n[t]=o};default:return(e,t,r)=>{void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t),n=Object.create(null);if("string"!=typeof e)return n;if(!(e=e.trim().replace(/^[?#&]/,"")))return n;for(const i of e.split("&")){if(""===i)continue;let[e,s]=o(t.decode?i.replace(/\+/g," "):i,"=");s=void 0===s?null:["comma","separator","bracket-separator"].includes(t.arrayFormat)?s:u(s,t),r(u(e,t),s,n)}for(const e of Object.keys(n)){const r=n[e];if("object"==typeof r&&null!==r)for(const e of Object.keys(r))r[e]=h(r[e],t);else n[e]=h(r,t)}return!1===t.sort?n:(!0===t.sort?Object.keys(n).sort():Object.keys(n).sort(t.sort)).reduce(((e,t)=>{const r=n[t];return Boolean(r)&&"object"==typeof r&&!Array.isArray(r)?e[t]=d(r):e[t]=r,e}),Object.create(null))}t.extract=p,t.parse=m,t.stringify=(e,t)=>{if(!e)return"";l((t=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},t)).arrayFormatSeparator);const r=r=>t.skipNull&&null==e[r]||t.skipEmptyString&&""===e[r],n=function(e){switch(e.arrayFormat){case"index":return t=>(r,n)=>{const i=r.length;return void 0===n||e.skipNull&&null===n||e.skipEmptyString&&""===n?r:null===n?[...r,[c(t,e),"[",i,"]"].join("")]:[...r,[c(t,e),"[",c(i,e),"]=",c(n,e)].join("")]};case"bracket":return t=>(r,n)=>void 0===n||e.skipNull&&null===n||e.skipEmptyString&&""===n?r:null===n?[...r,[c(t,e),"[]"].join("")]:[...r,[c(t,e),"[]=",c(n,e)].join("")];case"colon-list-separator":return t=>(r,n)=>void 0===n||e.skipNull&&null===n||e.skipEmptyString&&""===n?r:null===n?[...r,[c(t,e),":list="].join("")]:[...r,[c(t,e),":list=",c(n,e)].join("")];case"comma":case"separator":case"bracket-separator":{const t="bracket-separator"===e.arrayFormat?"[]=":"=";return r=>(n,i)=>void 0===i||e.skipNull&&null===i||e.skipEmptyString&&""===i?n:(i=null===i?"":i,0===n.length?[[c(r,e),t,c(i,e)].join("")]:[[n,c(i,e)].join(e.arrayFormatSeparator)])}default:return t=>(r,n)=>void 0===n||e.skipNull&&null===n||e.skipEmptyString&&""===n?r:null===n?[...r,c(t,e)]:[...r,[c(t,e),"=",c(n,e)].join("")]}}(t),i={};for(const t of Object.keys(e))r(t)||(i[t]=e[t]);const o=Object.keys(i);return!1!==t.sort&&o.sort(t.sort),o.map((r=>{const i=e[r];return void 0===i?"":null===i?c(r,t):Array.isArray(i)?0===i.length&&"bracket-separator"===t.arrayFormat?c(r,t)+"[]":i.reduce(n(r),[]).join("&"):c(r,t)+"="+c(i,t)})).filter((e=>e.length>0)).join("&")},t.parseUrl=(e,t)=>{t=Object.assign({decode:!0},t);const[r,n]=o(e,"#");return Object.assign({url:r.split("?")[0]||"",query:m(p(e),t)},t&&t.parseFragmentIdentifier&&n?{fragmentIdentifier:u(n,t)}:{})},t.stringifyUrl=(e,r)=>{r=Object.assign({encode:!0,strict:!0,[a]:!0},r);const n=f(e.url).split("?")[0]||"",i=t.extract(e.url),o=t.parse(i,{sort:!1}),s=Object.assign(o,e.query);let l=t.stringify(s,r);l&&(l=`?${l}`);let u=function(e){let t="";const r=e.indexOf("#");return-1!==r&&(t=e.slice(r)),t}(e.url);return e.fragmentIdentifier&&(u=`#${r[a]?c(e.fragmentIdentifier,r):e.fragmentIdentifier}`),`${n}${l}${u}`},t.pick=(e,r,n)=>{n=Object.assign({parseFragmentIdentifier:!0,[a]:!1},n);const{url:i,query:o,fragmentIdentifier:l}=t.parseUrl(e,n);return t.stringifyUrl({url:i,query:s(o,r),fragmentIdentifier:l},n)},t.exclude=(e,r,n)=>{const i=Array.isArray(r)?e=>!r.includes(e):(e,t)=>!r(e,t);return t.pick(e,i,n)}},3449:e=>{var t,r,n,i,o,s=(o=[[42e3,"just now"],[9e4,"a minute ago"],[36e5,"minutes ago",6e4],[54e5,"an hour ago"],[t=24*36e5,"hours ago",36e5],[2*t,"yesterday"],[7*t,"days ago",t],[1.5*(r=7*t),"a week ago"],[i=(n=365*t)/12,"weeks ago",r],[1.5*i,"a month ago"],[n,"months ago",i],[1.5*n,"a year ago"],[Number.MAX_VALUE,"years ago",n]],function(e,t){!t&&(t=(new Date).getTime()),t instanceof Date&&(t=t.getTime()),e instanceof Date&&(e=e.getTime());var r,n,i,s=t-e;for(n=-1,i=o.length;++n<i;)if(s<(r=o[n])[0])return null==r[2]?r[1]:Math.round(s/r[2])+" "+r[1]});e.exports&&(e.exports=s)},5267:e=>{e.exports=function(e){if(!e||"string"!=typeof e)return e;var t=new RegExp("^https?://(www.)?","i"),r=new RegExp("/$");return e.replace(t,"").replace(r,"")}},9581:(e,t,r)=>{"use strict";var n=r(3920);t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#|&)/,""))?e.split("&").reduce((function(e,t){var r=t.replace(/\+/g," ").split("="),n=r.shift(),i=r.length>0?r.join("="):void 0;return n=decodeURIComponent(n),i=void 0===i?null:decodeURIComponent(i),e.hasOwnProperty(n)?Array.isArray(e[n])?e[n].push(i):e[n]=[e[n],i]:e[n]=i,e}),{}):{}},t.stringify=function(e){return e?Object.keys(e).sort().map((function(t){var r=e[t];return Array.isArray(r)?r.sort().map((function(e){return n(t)+"="+n(e)})).join("&"):n(t)+"="+n(r)})).filter((function(e){return e.length>0})).join("&"):""}},3920:e=>{"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}},5193:(e,t,r)=>{var n,i,o=r(9581);"undefined"!=typeof window&&(n=window&&window.history&&window.history.replaceState,i=window&&window.history&&window.history.pushState),e.exports=n?function(e,t){t||(t={});var r,s=!e,a=!s&&"string"==typeof e,l=t.clear||a,c=t.pushState?i:n,u=l?{}:o.parse(window.location.search);if(s||a)r=e||"";else{for(var d in e){var f=e[d];f||0===f?u[d]=e[d]:delete u[d]}r=o.stringify(u)}r.length&&"?"!==r.charAt(0)&&(r="?"+r),c.call(window.history,t.state||window.history.state,"",window.location.pathname+(r||""))}:function(){}},500:e=>{"use strict";e.exports=(e,t)=>{if("string"!=typeof e||"string"!=typeof t)throw new TypeError("Expected the arguments to be of type `string`");if(""===t)return[e];const r=e.indexOf(t);return-1===r?[e]:[e.slice(0,r),e.slice(r+t.length)]}},2001:e=>{!function(){var t={de_DE:{days:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],shortDays:["So","Mo","Di","Mi","Do","Fr","Sa"],months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],shortMonths:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d.%m.%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},en_CA:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ordinalSuffixes:["st","nd","rd","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","st","nd","rd","th","th","th","th","th","th","th","st"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}},en_US:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ordinalSuffixes:["st","nd","rd","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","st","nd","rd","th","th","th","th","th","th","th","st"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%m/%d/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}},es_MX:{days:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],shortDays:["dom","lun","mar","mié","jue","vie","sáb"],months:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre"," diciembre"],shortMonths:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},fr_FR:{days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],shortDays:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],months:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],shortMonths:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},it_IT:{days:["domenica","lunedì","martedì","mercoledì","giovedì","venerdì","sabato"],shortDays:["dom","lun","mar","mer","gio","ven","sab"],months:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"],shortMonths:["pr","mag","giu","lug","ago","set","ott","nov","dic"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},nl_NL:{days:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],shortDays:["zo","ma","di","wo","do","vr","za"],months:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],shortMonths:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},pt_BR:{days:["domingo","segunda","terça","quarta","quinta","sexta","sábado"],shortDays:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],months:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],shortMonths:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},ru_RU:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],shortDays:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],shortMonths:["янв","фев","мар","апр","май","июн","июл","авг","сен","окт","ноя","дек"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X",D:"%d.%m.%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},tr_TR:{days:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],shortDays:["Paz","Pzt","Sal","Çrş","Prş","Cum","Cts"],months:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],shortMonths:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],AM:"ÖÖ",PM:"ÖS",am:"ÖÖ",pm:"ÖS",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},zh_CN:{days:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],shortDays:["日","一","二","三","四","五","六"],months:["一月份","二月份","三月份","四月份","五月份","六月份","七月份","八月份","九月份","十月份","十一月份","十二月份"],shortMonths:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],AM:"上午",PM:"下午",am:"上午",pm:"下午",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}}},r=t.en_US,n=new function e(n,d,f){var p,h=n||r,m=d||0,y=f||!1,v=0;function g(e,t,r,n){for(var c="",d=null,f=!1,p=e.length,h=!1,v=0;v<p;v++){var b=e.charCodeAt(v);if(!0!==f)37!==b?c+=e[v]:f=!0;else{if(45===b){d="";continue}if(95===b){d=" ";continue}if(48===b){d="0";continue}if(58===b){h&&u("[WARNING] detected use of unsupported %:: or %::: modifiers to strftime"),h=!0;continue}switch(b){case 37:c+="%";break;case 65:c+=r.days[t.getDay()];break;case 66:c+=r.months[t.getMonth()];break;case 67:c+=i(Math.floor(t.getFullYear()/100),d);break;case 68:c+=g(r.formats.D,t,r,n);break;case 70:c+=g(r.formats.F,t,r,n);break;case 72:c+=i(t.getHours(),d);break;case 73:c+=i(s(t.getHours()),d);break;case 76:c+=o(Math.floor(n%1e3));break;case 77:c+=i(t.getMinutes(),d);break;case 80:c+=t.getHours()<12?r.am:r.pm;break;case 82:c+=g(r.formats.R,t,r,n);break;case 83:c+=i(t.getSeconds(),d);break;case 84:c+=g(r.formats.T,t,r,n);break;case 85:c+=i(a(t,"sunday"),d);break;case 87:c+=i(a(t,"monday"),d);break;case 88:c+=g(r.formats.X,t,r,n);break;case 89:c+=t.getFullYear();break;case 90:if(y&&0===m)c+="GMT";else{var w=t.toString().match(/\(([\w\s]+)\)/);c+=w&&w[1]||""}break;case 97:c+=r.shortDays[t.getDay()];break;case 98:c+=r.shortMonths[t.getMonth()];break;case 99:c+=g(r.formats.c,t,r,n);break;case 100:c+=i(t.getDate(),d);break;case 101:c+=i(t.getDate(),null==d?" ":d);break;case 104:c+=r.shortMonths[t.getMonth()];break;case 106:var x=new Date(t.getFullYear(),0,1);c+=o(S=Math.ceil((t.getTime()-x.getTime())/864e5));break;case 107:c+=i(t.getHours(),null==d?" ":d);break;case 108:c+=i(s(t.getHours()),null==d?" ":d);break;case 109:c+=i(t.getMonth()+1,d);break;case 110:c+="\n";break;case 111:var S=t.getDate();r.ordinalSuffixes?c+=String(S)+(r.ordinalSuffixes[S-1]||l(S)):c+=String(S)+l(S);break;case 112:c+=t.getHours()<12?r.AM:r.PM;break;case 114:c+=g(r.formats.r,t,r,n);break;case 115:c+=Math.floor(n/1e3);break;case 116:c+="\t";break;case 117:c+=0===(S=t.getDay())?7:S;break;case 118:c+=g(r.formats.v,t,r,n);break;case 119:c+=t.getDay();break;case 120:c+=g(r.formats.x,t,r,n);break;case 121:c+=(""+t.getFullYear()).slice(2);break;case 122:if(y&&0===m)c+=h?"+00:00":"+0000";else{var k,E=(k=0!==m?m/6e4:-t.getTimezoneOffset())<0?"-":"+",T=h?":":"",C=Math.floor(Math.abs(k/60)),L=Math.abs(k%60);c+=E+i(C)+T+i(L)}break;default:f&&(c+="%"),c+=e[v]}d=null,f=!1}}return c}var b=function(e,t){var r;if(t){if(r=t.getTime(),y){var n=c(t);if(c(t=new Date(r+n+m))!==n){var i=c(t);t=new Date(r+i+m)}}}else{var o=Date.now();o>v?(v=o,p=new Date(v),r=v,y&&(p=new Date(v+c(p)+m))):r=v,t=p}return g(e,t,h,r)};return b.localize=function(t){return new e(t||h,m,y)},b.localizeByIdentifier=function(e){var r=t[e];return r?b.localize(r):(u('[WARNING] No locale found with identifier "'+e+'".'),b)},b.timezone=function(t){var r=m,n=y,i=typeof t;return"number"!==i&&"string"!==i||(n=!0,"string"===i?r=("-"===t[0]?-1:1)*(60*parseInt(t.slice(1,3),10)+parseInt(t.slice(3,5),10))*60*1e3:"number"===i&&(r=60*t*1e3)),new e(h,r,n)},b.utc=function(){return new e(h,m,!0)},b}(r,0,!1);function i(e,t){return""===t||e>9?e:(null==t&&(t="0"),t+e)}function o(e){return e>99?e:e>9?"0"+e:"00"+e}function s(e){return 0===e?12:e>12?e-12:e}function a(e,t){t=t||"sunday";var r=e.getDay();"monday"===t&&(0===r?r=6:r--);var n=Date.UTC(e.getFullYear(),0,1),i=Date.UTC(e.getFullYear(),e.getMonth(),e.getDate()),o=(Math.floor((i-n)/864e5)+7-r)/7;return Math.floor(o)}function l(e){var t=e%10,r=e%100;if(r>=11&&r<=13||0===t||t>=4)return"th";switch(t){case 1:return"st";case 2:return"nd";case 3:return"rd"}}function c(e){return 6e4*(e.getTimezoneOffset()||0)}function u(e){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e)}e.exports=n,"function"!=typeof Date.now&&(Date.now=function(){return+new Date})}()},610:e=>{"use strict";e.exports=e=>encodeURIComponent(e).replace(/[!'()*]/g,(e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},1557:e=>{e.exports=function(e){var t=[].forEach,r=[].some,n=document.body,i=!0,o=" ";function s(r,n){var i,l,c,u=n.appendChild((i=r,l=document.createElement("li"),c=document.createElement("a"),e.listItemClass&&l.setAttribute("class",e.listItemClass),e.onClick&&(c.onclick=e.onClick),e.includeTitleTags&&c.setAttribute("title",i.textContent),e.includeHtml&&i.childNodes.length?t.call(i.childNodes,(function(e){c.appendChild(e.cloneNode(!0))})):c.textContent=i.textContent,c.setAttribute("href",e.basePath+"#"+i.id),c.setAttribute("class",e.linkClass+o+"node-name--"+i.nodeName+o+e.extraLinkClasses),l.appendChild(c),l));if(r.children.length){var d=a(r.isCollapsed);r.children.forEach((function(e){s(e,d)})),u.appendChild(d)}}function a(t){var r=e.orderedList?"ol":"ul",n=document.createElement(r),i=e.listClass+o+e.extraListClasses;return t&&(i+=o+e.collapsibleClass,i+=o+e.isCollapsedClass),n.setAttribute("class",i),n}function l(t){var r=0;return t!==document.querySelector(e.contentSelector&&null!=t)&&(r=t.offsetTop,e.hasInnerContainers&&(r+=l(t.offsetParent))),r}function c(t){return-1!==t.className.indexOf(e.collapsibleClass)&&-1!==t.className.indexOf(e.isCollapsedClass)?(t.className=t.className.split(o+e.isCollapsedClass).join(""),c(t.parentNode.parentNode)):t}return{enableTocAnimation:function(){i=!0},disableTocAnimation:function(t){var r=t.target||t.srcElement;"string"==typeof r.className&&-1!==r.className.indexOf(e.linkClass)&&(i=!1)},render:function(e,t){var r=a(!1);t.forEach((function(e){s(e,r)}));var n=document.querySelector(e);if(null!==n)return n.firstChild&&n.removeChild(n.firstChild),0===t.length?n:n.appendChild(r)},updateToc:function(s){var a;a=e.scrollContainer&&document.querySelector(e.scrollContainer)?document.querySelector(e.scrollContainer).scrollTop:document.documentElement.scrollTop||n.scrollTop,e.positionFixedSelector&&function(){var t;t=e.scrollContainer&&document.querySelector(e.scrollContainer)?document.querySelector(e.scrollContainer).scrollTop:document.documentElement.scrollTop||n.scrollTop;var r=document.querySelector(e.positionFixedSelector);"auto"===e.fixedSidebarOffset&&(e.fixedSidebarOffset=document.querySelector(e.tocSelector).offsetTop),t>e.fixedSidebarOffset?-1===r.className.indexOf(e.positionFixedClass)&&(r.className+=o+e.positionFixedClass):r.className=r.className.split(o+e.positionFixedClass).join("")}();var u,d=s;if(i&&null!==document.querySelector(e.tocSelector)&&d.length>0){r.call(d,(function(t,r){return l(t)>a+e.headingsOffset+10?(u=d[0===r?r:r-1],!0):r===d.length-1?(u=d[d.length-1],!0):void 0}));var f=document.querySelector(e.tocSelector).querySelectorAll("."+e.linkClass);t.call(f,(function(t){t.className=t.className.split(o+e.activeLinkClass).join("")}));var p=document.querySelector(e.tocSelector).querySelectorAll("."+e.listItemClass);t.call(p,(function(t){t.className=t.className.split(o+e.activeListItemClass).join("")}));var h=document.querySelector(e.tocSelector).querySelector("."+e.linkClass+".node-name--"+u.nodeName+'[href="'+e.basePath+"#"+u.id.replace(/([ #;&,.+*~':"!^$[\]()=>|/@])/g,"\\$1")+'"]');h&&-1===h.className.indexOf(e.activeLinkClass)&&(h.className+=o+e.activeLinkClass);var m=h.parentNode;m&&-1===m.className.indexOf(e.activeListItemClass)&&(m.className+=o+e.activeListItemClass);var y=document.querySelector(e.tocSelector).querySelectorAll("."+e.listClass+"."+e.collapsibleClass);t.call(y,(function(t){-1===t.className.indexOf(e.isCollapsedClass)&&(t.className+=o+e.isCollapsedClass)})),h.nextSibling&&-1!==h.nextSibling.className.indexOf(e.isCollapsedClass)&&(h.nextSibling.className=h.nextSibling.className.split(o+e.isCollapsedClass).join("")),c(h.parentNode.parentNode)}}}}},1340:e=>{e.exports={tocSelector:".js-toc",contentSelector:".js-toc-content",headingSelector:"h1, h2, h3",ignoreSelector:".js-toc-ignore",hasInnerContainers:!1,linkClass:"toc-link",extraLinkClasses:"",activeLinkClass:"is-active-link",listClass:"toc-list",extraListClasses:"",isCollapsedClass:"is-collapsed",collapsibleClass:"is-collapsible",listItemClass:"toc-list-item",activeListItemClass:"is-active-li",collapseDepth:0,scrollSmooth:!0,scrollSmoothDuration:420,scrollSmoothOffset:0,scrollEndCallback:function(e){},headingsOffset:1,throttleTimeout:50,positionFixedSelector:null,positionFixedClass:"is-position-fixed",fixedSidebarOffset:"auto",includeHtml:!1,includeTitleTags:!1,onClick:function(e){},orderedList:!0,scrollContainer:null,skipRendering:!1,headingLabelCallback:!1,ignoreHiddenElements:!1,headingObjectCallback:null,basePath:"",disableTocScrollSync:!1}},2866:function(e,t,r){var n,i,o;i=[],void 0===(o="function"==typeof(n=function(e){"use strict";var t,n,i,o=r(1340),s={},a={},l=r(1557),c=r(9620),u=r(3693),d=!!(e&&e.document&&e.document.querySelector&&e.addEventListener);if("undefined"!=typeof window||d){var f=Object.prototype.hasOwnProperty;return a.destroy=function(){if(!s.skipRendering)try{document.querySelector(s.tocSelector).innerHTML=""}catch(e){console.warn("Element not found: "+s.tocSelector)}s.scrollContainer&&document.querySelector(s.scrollContainer)?(document.querySelector(s.scrollContainer).removeEventListener("scroll",this._scrollListener,!1),document.querySelector(s.scrollContainer).removeEventListener("resize",this._scrollListener,!1),t&&document.querySelector(s.scrollContainer).removeEventListener("click",this._clickListener,!1)):(document.removeEventListener("scroll",this._scrollListener,!1),document.removeEventListener("resize",this._scrollListener,!1),t&&document.removeEventListener("click",this._clickListener,!1))},a.init=function(e){if(d&&(s=function(){for(var e={},t=0;t<arguments.length;t++){var r=arguments[t];for(var n in r)f.call(r,n)&&(e[n]=r[n])}return e}(o,e||{}),this.options=s,this.state={},s.scrollSmooth&&(s.duration=s.scrollSmoothDuration,s.offset=s.scrollSmoothOffset,a.scrollSmooth=r(764).initSmoothScrolling(s)),t=l(s),n=c(s),this._buildHtml=t,this._parseContent=n,a.destroy(),null!==(i=n.selectHeadings(s.contentSelector,s.headingSelector)))){var h=n.nestHeadingsArray(i).nest;s.skipRendering||t.render(s.tocSelector,h),this._scrollListener=p((function(e){t.updateToc(i),!s.disableTocScrollSync&&u(s);var r=e&&e.target&&e.target.scrollingElement&&0===e.target.scrollingElement.scrollTop;(e&&(0===e.eventPhase||null===e.currentTarget)||r)&&(t.updateToc(i),s.scrollEndCallback&&s.scrollEndCallback(e))}),s.throttleTimeout),this._scrollListener(),s.scrollContainer&&document.querySelector(s.scrollContainer)?(document.querySelector(s.scrollContainer).addEventListener("scroll",this._scrollListener,!1),document.querySelector(s.scrollContainer).addEventListener("resize",this._scrollListener,!1)):(document.addEventListener("scroll",this._scrollListener,!1),document.addEventListener("resize",this._scrollListener,!1));var m=null;return this._clickListener=p((function(e){s.scrollSmooth&&t.disableTocAnimation(e),t.updateToc(i),m&&clearTimeout(m),m=setTimeout((function(){t.enableTocAnimation()}),s.scrollSmoothDuration)}),s.throttleTimeout),s.scrollContainer&&document.querySelector(s.scrollContainer)?document.querySelector(s.scrollContainer).addEventListener("click",this._clickListener,!1):document.addEventListener("click",this._clickListener,!1),this}},a.refresh=function(e){a.destroy(),a.init(e||this.options)},e.tocbot=a,a}function p(e,t,r){var n,i;return t||(t=250),function(){var o=r||this,s=+new Date,a=arguments;n&&s<n+t?(clearTimeout(i),i=setTimeout((function(){n=s,e.apply(o,a)}),t)):(n=s,e.apply(o,a))}}}(void 0!==r.g?r.g:this.window||this.global))?n.apply(t,i):n)||(e.exports=o)},9620:e=>{e.exports=function(e){var t=[].reduce;function r(e){return e[e.length-1]}function n(e){return+e.nodeName.toUpperCase().replace("H","")}function i(t){if(!(t instanceof window.HTMLElement))return t;if(e.ignoreHiddenElements&&(!t.offsetHeight||!t.offsetParent))return null;const r=t.getAttribute("data-heading-label")||(e.headingLabelCallback?String(e.headingLabelCallback(t.textContent)):t.textContent.trim());var i={id:t.id,children:[],nodeName:t.nodeName,headingLevel:n(t),textContent:r};return e.includeHtml&&(i.childNodes=t.childNodes),e.headingObjectCallback?e.headingObjectCallback(i,t):i}return{nestHeadingsArray:function(n){return t.call(n,(function(t,n){var o=i(n);return o&&function(t,n){for(var o=i(t),s=o.headingLevel,a=n,l=r(a),c=s-(l?l.headingLevel:0);c>0&&(!(l=r(a))||s!==l.headingLevel);)l&&void 0!==l.children&&(a=l.children),c--;s>=e.collapseDepth&&(o.isCollapsed=!0),a.push(o)}(o,t.nest),t}),{nest:[]})},selectHeadings:function(t,r){var n=r;e.ignoreSelector&&(n=r.split(",").map((function(t){return t.trim()+":not("+e.ignoreSelector+")"})));try{return document.querySelector(t).querySelectorAll(n)}catch(e){return console.warn("Element not found: "+t),null}}}}},764:(e,t)=>{t.initSmoothScrolling=function(e){var t=e.duration,r=e.offset,n=location.hash?i(location.href):location.href;function i(e){return e.slice(0,e.lastIndexOf("#"))}document.body.addEventListener("click",(function(o){var s;"a"!==(s=o.target).tagName.toLowerCase()||!(s.hash.length>0||"#"===s.href.charAt(s.href.length-1))||i(s.href)!==n&&i(s.href)+"#"!==n||o.target.className.indexOf("no-smooth-scroll")>-1||"#"===o.target.href.charAt(o.target.href.length-2)&&"!"===o.target.href.charAt(o.target.href.length-1)||-1===o.target.className.indexOf(e.linkClass)||function(e,t){var r,n,i=window.pageYOffset,o={duration:t.duration,offset:t.offset||0,callback:t.callback,easing:t.easing||function(e,t,r,n){return(e/=n/2)<1?r/2*e*e+t:-r/2*(--e*(e-2)-1)+t}},s=document.querySelector('[id="'+decodeURI(e).split("#").join("")+'"]')||document.querySelector('[id="'+e.split("#").join("")+'"]'),a="string"==typeof e?o.offset+(e?s&&s.getBoundingClientRect().top||0:-(document.documentElement.scrollTop||document.body.scrollTop)):e,l="function"==typeof o.duration?o.duration(a):o.duration;function c(e){n=e-r,window.scrollTo(0,o.easing(n,i,a,l)),n<l?requestAnimationFrame(c):(window.scrollTo(0,i+a),"function"==typeof o.callback&&o.callback())}requestAnimationFrame((function(e){r=e,c(e)}))}(o.target.hash,{duration:t,offset:r,callback:function(){var e,t;e=o.target.hash,(t=document.getElementById(e.substring(1)))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())}})}),!1)}},3693:e=>{e.exports=function(e){var t=document.querySelector(e.tocSelector);if(t&&t.scrollHeight>t.clientHeight){var r=t.querySelector("."+e.activeListItemClass);r&&(t.scrollTop=r.offsetTop)}}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),document.addEventListener("DOMContentLoaded",(function(){r(6073)(),r(8120)(),r(779)(),window.app&&(r(5444)(),r(1526)()),r(7899)(),r(3829)(),r(9780)(),r(2132)(),r(70)(),r(5515)(),r(7229)(),r(7327)(),r(9702)(),r(9376)(),r(7924)(),r(3859)(),r(5121)(),r(2472)(),r(9130)(),r(5317)()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,